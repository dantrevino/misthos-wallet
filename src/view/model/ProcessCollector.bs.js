// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Utils = require("../../utils/Utils.bs.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Belt_Set = require("bs-platform/lib/js/belt_Set.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var PrimitiveTypes = require("../../application/PrimitiveTypes.bs.js");

var make = PrimitiveTypes.ProcessId[/* makeMap */8];

function addProposal(localUser, param, makeData, map) {
  var eligibleWhenProposing = param[/* eligibleWhenProposing */3];
  var processId = param[/* processId */0];
  return Belt_Map.set(map, processId, /* record */[
              /* processId */processId,
              /* status : PendingApproval */0,
              /* proposedBy */param[/* proposerId */4],
              /* canVote */Belt_Set.has(eligibleWhenProposing, localUser),
              /* voters */Belt_List.mapU(Belt_Set.toList(eligibleWhenProposing), (function (userId) {
                      return /* record */[
                              /* userId */userId,
                              /* voteStatus : Pending */0
                            ];
                    })),
              /* data */Curry._1(makeData, param[/* data */6])
            ]);
}

function addRejection(localUser, param, map) {
  var rejectorId = param[/* rejectorId */1];
  return Belt_Map.update(map, param[/* processId */0], (function (param) {
                return Utils.mapOption((function ($$process) {
                              return /* record */[
                                      /* processId */$$process[/* processId */0],
                                      /* status */$$process[/* status */1],
                                      /* proposedBy */$$process[/* proposedBy */2],
                                      /* canVote */$$process[/* canVote */3] && PrimitiveTypes.UserId[/* neq */6](rejectorId, localUser),
                                      /* voters */Belt_List.mapU($$process[/* voters */4], (function (param) {
                                              var userId = param[/* userId */0];
                                              var match = PrimitiveTypes.UserId[/* eq */5](userId, rejectorId);
                                              if (match) {
                                                return /* record */[
                                                        /* userId */userId,
                                                        /* voteStatus : Rejected */2
                                                      ];
                                              } else {
                                                return /* record */[
                                                        /* userId */userId,
                                                        /* voteStatus */param[/* voteStatus */1]
                                                      ];
                                              }
                                            })),
                                      /* data */$$process[/* data */5]
                                    ];
                            }), param);
              }));
}

function addEndorsement(localUser, param, map) {
  var supporterId = param[/* supporterId */1];
  return Belt_Map.update(map, param[/* processId */0], (function (param) {
                return Utils.mapOption((function ($$process) {
                              return /* record */[
                                      /* processId */$$process[/* processId */0],
                                      /* status */$$process[/* status */1],
                                      /* proposedBy */$$process[/* proposedBy */2],
                                      /* canVote */$$process[/* canVote */3] && PrimitiveTypes.UserId[/* neq */6](supporterId, localUser),
                                      /* voters */Belt_List.mapU($$process[/* voters */4], (function (param) {
                                              var userId = param[/* userId */0];
                                              var match = PrimitiveTypes.UserId[/* eq */5](userId, supporterId);
                                              if (match) {
                                                return /* record */[
                                                        /* userId */userId,
                                                        /* voteStatus : Endorsed */1
                                                      ];
                                              } else {
                                                return /* record */[
                                                        /* userId */userId,
                                                        /* voteStatus */param[/* voteStatus */1]
                                                      ];
                                              }
                                            })),
                                      /* data */$$process[/* data */5]
                                    ];
                            }), param);
              }));
}

function addAcceptance(param, map) {
  return Belt_Map.update(map, param[/* processId */0], (function (param) {
                return Utils.mapOption((function (payout) {
                              return /* record */[
                                      /* processId */payout[/* processId */0],
                                      /* status : Accepted */1,
                                      /* proposedBy */payout[/* proposedBy */2],
                                      /* canVote */false,
                                      /* voters */payout[/* voters */4],
                                      /* data */payout[/* data */5]
                                    ];
                            }), param);
              }));
}

function addDenial(param, map) {
  return Belt_Map.update(map, param[/* processId */0], (function (param) {
                return Utils.mapOption((function (payout) {
                              return /* record */[
                                      /* processId */payout[/* processId */0],
                                      /* status : Denied */2,
                                      /* proposedBy */payout[/* proposedBy */2],
                                      /* canVote */false,
                                      /* voters */payout[/* voters */4],
                                      /* data */payout[/* data */5]
                                    ];
                            }), param);
              }));
}

function addAbort(param, map) {
  return Belt_Map.update(map, param[/* processId */0], (function (param) {
                return Utils.mapOption((function (payout) {
                              return /* record */[
                                      /* processId */payout[/* processId */0],
                                      /* status : Aborted */3,
                                      /* proposedBy */payout[/* proposedBy */2],
                                      /* canVote */false,
                                      /* voters */payout[/* voters */4],
                                      /* data */payout[/* data */5]
                                    ];
                            }), param);
              }));
}

function updateData(processId, fn, map) {
  return Belt_Map.update(map, processId, (function (param) {
                return Utils.mapOption((function ($$process) {
                              return /* record */[
                                      /* processId */$$process[/* processId */0],
                                      /* status */$$process[/* status */1],
                                      /* proposedBy */$$process[/* proposedBy */2],
                                      /* canVote */$$process[/* canVote */3],
                                      /* voters */$$process[/* voters */4],
                                      /* data */Curry._1(fn, $$process[/* data */5])
                                    ];
                            }), param);
              }));
}

exports.make = make;
exports.addProposal = addProposal;
exports.addRejection = addRejection;
exports.addEndorsement = addEndorsement;
exports.addAcceptance = addAcceptance;
exports.addDenial = addDenial;
exports.addAbort = addAbort;
exports.updateData = updateData;
/* Utils Not a pure module */

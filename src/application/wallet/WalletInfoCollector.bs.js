// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var BTC = require("./BTC.bs.js");
var Utils = require("../../utils/Utils.bs.js");
var Address = require("./Address.bs.js");
var Network = require("./Network.bs.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Belt_Set = require("bs-platform/lib/js/belt_Set.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var WalletTypes = require("./WalletTypes.bs.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var PrimitiveTypes = require("../PrimitiveTypes.bs.js");
var AccountKeyChain = require("./AccountKeyChain.bs.js");
var CustodianKeyChain = require("./CustodianKeyChain.bs.js");
var PayoutTransaction = require("./PayoutTransaction.bs.js");

function getPayoutTx(processId, param) {
  return Belt_Map.getExn(param[/* payoutProcesses */8], processId);
}

function addressInfos(accountIdx, param) {
  return Js_option.getWithDefault(/* [] */0, Belt_Map.get(param[/* addressInfos */11], accountIdx));
}

function addressInfoFor(accountIdx, findAddress, collector) {
  return Js_option.getExn(Belt_List.getByU(addressInfos(accountIdx, collector), (function (param) {
                    return param[/* address */3] === findAddress;
                  })));
}

function collidingProcesses(accountIdx, processId, param) {
  var reserved = param[/* reserved */6];
  return Belt_Set.remove(Belt_Array.reduceU(Js_option.getWithDefault(/* array */[], Utils.mapOption((function (param) {
                            return param[/* usedInputs */1];
                          }), Belt_Map.get(param[/* payoutProcesses */8], processId))), PrimitiveTypes.ProcessId[/* emptySet */9], (function (res, input) {
                    return Belt_Set.union(Belt_Map.getWithDefault(Belt_Map.getWithDefault(reserved, accountIdx, Network.inputMap(/* () */0)), input, PrimitiveTypes.ProcessId[/* emptySet */9]), res);
                  })), processId);
}

function totalUnusedBTC(accountIdx, param) {
  var __x = Belt_MapString.reduceU(Belt_Map.getWithDefault(param[/* spendable */1], accountIdx, Belt_MapString.empty), /* tuple */[
        Network.inputSet(/* () */0),
        BTC.zero
      ], (function (res, param, inputs) {
          return Belt_List.reduceU(inputs, res, (function (param, input) {
                        return /* tuple */[
                                Belt_Set.add(param[0], input),
                                input[/* value */3].plus(param[1])
                              ];
                      }));
        }));
  var match = Belt_MapString.reduceU(Belt_Map.getWithDefault(param[/* oldSpendable */2], accountIdx, Belt_MapString.empty), __x, (function (res, param, inputs) {
          return Belt_List.reduceU(inputs, res, (function (param, input) {
                        return /* tuple */[
                                Belt_Set.add(param[0], input),
                                input[/* value */3].plus(param[1])
                              ];
                      }));
        }));
  return Belt_Set.reduceU(Belt_Set.diff(Belt_Map.getWithDefault(param[/* unlocked */3], accountIdx, Network.inputSet(/* () */0)), match[0]), match[1], (function (res, param) {
                return param[/* value */3].plus(res);
              }));
}

function totalReservedBTC(accountIdx, param) {
  return Belt_Array.reduceU(Belt_Map.keysToArray(Belt_Map.getWithDefault(param[/* reserved */6], accountIdx, Network.inputMap(/* () */0))), BTC.zero, (function (res, param) {
                return param[/* value */3].plus(res);
              }));
}

function currentKeyChainIdent(accountIdx, userId, param) {
  return Js_option.getExn(Belt_List.getAssoc(Js_option.getExn(Belt_List.getAssoc(param[/* activatedKeyChain */9], accountIdx, WalletTypes.AccountIndex[/* eq */7])), userId, PrimitiveTypes.UserId[/* eq */5]));
}

function currentKeyChain(accountIdx, userId, state) {
  var currentIdent = currentKeyChainIdent(accountIdx, userId, state);
  return AccountKeyChain.Collection[/* lookup */2](accountIdx, currentIdent, state[/* keyChains */7]);
}

function exposedCoordinates(param) {
  return param[/* exposedCoordinates */10];
}

function accountKeyChains(param) {
  return param[/* keyChains */7];
}

function inputsFor(accountIdx, info, state) {
  var match = info[/* addressStatus */5];
  var tmp;
  switch (match) {
    case 0 : 
        tmp = state[/* spendable */1];
        break;
    case 1 : 
    case 2 : 
        tmp = state[/* oldSpendable */2];
        break;
    case 3 : 
        tmp = state[/* temporarilyInaccessible */4];
        break;
    case 4 : 
        tmp = state[/* inaccessible */5];
        break;
    
  }
  return Belt_MapString.getWithDefault(Belt_Map.getWithDefault(tmp, accountIdx, Belt_MapString.empty), info[/* address */3], /* [] */0);
}

function currentSpendableInputs(accountIdx, param) {
  return Belt_Set.diff(Belt_MapString.reduceU(Belt_Map.getWithDefault(param[/* spendable */1], accountIdx, Belt_MapString.empty), Network.inputSet(/* () */0), (function (res, param, inputs) {
                    return Belt_Set.mergeMany(res, Belt_List.toArray(inputs));
                  })), Belt_Set.mergeMany(Network.inputSet(/* () */0), Belt_Map.keysToArray(Belt_Map.getWithDefault(param[/* reserved */6], accountIdx, Network.inputMap(/* () */0)))));
}

function unlockedInputs(accountIdx, collector) {
  return Belt_Set.keepU(Belt_Map.getWithDefault(collector[/* unlocked */3], accountIdx, Network.inputSet(/* () */0)), (function (param) {
                return addressInfoFor(accountIdx, param[/* address */2], collector)[/* addressStatus */5] !== /* Inaccessible */4;
              }));
}

function oldSpendableInputs(accountIdx, param) {
  return Belt_Set.diff(Belt_MapString.reduceU(Belt_Map.getWithDefault(param[/* oldSpendable */2], accountIdx, Belt_MapString.empty), Network.inputSet(/* () */0), (function (res, param, inputs) {
                    return Belt_Set.mergeMany(res, Belt_List.toArray(inputs));
                  })), Belt_Set.mergeMany(Network.inputSet(/* () */0), Belt_Map.keysToArray(Belt_Map.getWithDefault(param[/* reserved */6], accountIdx, Network.inputMap(/* () */0)))));
}

function allUnspentInputs(param) {
  var __x = Belt_Array.reduceU(Belt_Map.valuesToArray(param[/* temporarilyInaccessible */4]), Network.inputSet(/* () */0), (function (res, map) {
          return Belt_MapString.reduceU(map, res, (function (res, param, inputs) {
                        return Belt_Set.mergeMany(res, Belt_List.toArray(inputs));
                      }));
        }));
  var __x$1 = Belt_Array.reduceU(Belt_Map.valuesToArray(param[/* oldSpendable */2]), __x, (function (res, map) {
          return Belt_MapString.reduceU(map, res, (function (res, param, inputs) {
                        return Belt_Set.mergeMany(res, Belt_List.toArray(inputs));
                      }));
        }));
  return Belt_Array.reduceU(Belt_Map.valuesToArray(param[/* spendable */1]), __x$1, (function (res, map) {
                return Belt_MapString.reduceU(map, res, (function (res, param, inputs) {
                              return Belt_Set.mergeMany(res, Belt_List.toArray(inputs));
                            }));
              }));
}

function network(param) {
  return param[/* network */0];
}

function nextChangeAddress(accountIdx, userId, collector) {
  var keyChainIdent = currentKeyChainIdent(accountIdx, userId, collector);
  var accountKeyChain = AccountKeyChain.Collection[/* lookup */2](accountIdx, keyChainIdent, collector[/* keyChains */7]);
  var coordinates = Address.Coordinates[/* allForAccount */8](accountIdx)(collector[/* exposedCoordinates */10]);
  var nextChangeCoordinates = Address.Coordinates[/* nextInternal */1](userId, coordinates, accountKeyChain);
  return Address.find(nextChangeCoordinates, collector[/* keyChains */7]);
}

function make(param) {
  return /* record */[
          /* network : Regtest */0,
          /* spendable */WalletTypes.AccountIndex[/* makeMap */10](/* () */0),
          /* oldSpendable */WalletTypes.AccountIndex[/* makeMap */10](/* () */0),
          /* unlocked */WalletTypes.AccountIndex[/* makeMap */10](/* () */0),
          /* temporarilyInaccessible */WalletTypes.AccountIndex[/* makeMap */10](/* () */0),
          /* inaccessible */WalletTypes.AccountIndex[/* makeMap */10](/* () */0),
          /* reserved */WalletTypes.AccountIndex[/* makeMap */10](/* () */0),
          /* keyChains */AccountKeyChain.Collection[/* empty */0],
          /* payoutProcesses */PrimitiveTypes.ProcessId[/* makeMap */8](/* () */0),
          /* activatedKeyChain : [] */0,
          /* exposedCoordinates : [] */0,
          /* addressInfos */WalletTypes.AccountIndex[/* makeMap */10](/* () */0),
          /* currentCustodians */WalletTypes.AccountIndex[/* makeMap */10](/* () */0)
        ];
}

function removeInputsFromReserved(accountIdx, processId, inputs, reserved) {
  return Belt_Map.updateU(reserved, accountIdx, (function (reserved) {
                var reserved$1 = Js_option.getWithDefault(Network.inputMap(/* () */0), reserved);
                return Caml_option.some(Belt_Array.reduceU(inputs, reserved$1, (function (lookup, input) {
                                  return Belt_Map.updateU(lookup, input, (function (processes) {
                                                var processes$1 = Belt_Set.remove(Js_option.getWithDefault(PrimitiveTypes.ProcessId[/* emptySet */9], processes), processId);
                                                var match = Belt_Set.isEmpty(processes$1);
                                                if (match) {
                                                  return undefined;
                                                } else {
                                                  return Caml_option.some(processes$1);
                                                }
                                              }));
                                })));
              }));
}

function removeAddressFrom(accountIdx, address, status, state) {
  var exit = 0;
  switch (status) {
    case 0 : 
        var accountSpendable = Belt_Map.getWithDefault(state[/* spendable */1], accountIdx, Belt_MapString.empty);
        var inputs = Belt_MapString.get(accountSpendable, address);
        return /* tuple */[
                inputs,
                /* record */[
                  /* network */state[/* network */0],
                  /* spendable */Belt_Map.set(state[/* spendable */1], accountIdx, Belt_MapString.remove(accountSpendable, address)),
                  /* oldSpendable */state[/* oldSpendable */2],
                  /* unlocked */state[/* unlocked */3],
                  /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                  /* inaccessible */state[/* inaccessible */5],
                  /* reserved */state[/* reserved */6],
                  /* keyChains */state[/* keyChains */7],
                  /* payoutProcesses */state[/* payoutProcesses */8],
                  /* activatedKeyChain */state[/* activatedKeyChain */9],
                  /* exposedCoordinates */state[/* exposedCoordinates */10],
                  /* addressInfos */state[/* addressInfos */11],
                  /* currentCustodians */state[/* currentCustodians */12]
                ]
              ];
    case 1 : 
    case 2 : 
        exit = 1;
        break;
    case 3 : 
        var accountTemporarilyInaccessible = Belt_Map.getWithDefault(state[/* temporarilyInaccessible */4], accountIdx, Belt_MapString.empty);
        var inputs$1 = Belt_MapString.get(accountTemporarilyInaccessible, address);
        return /* tuple */[
                inputs$1,
                /* record */[
                  /* network */state[/* network */0],
                  /* spendable */state[/* spendable */1],
                  /* oldSpendable */state[/* oldSpendable */2],
                  /* unlocked */state[/* unlocked */3],
                  /* temporarilyInaccessible */Belt_Map.set(state[/* temporarilyInaccessible */4], accountIdx, Belt_MapString.remove(accountTemporarilyInaccessible, address)),
                  /* inaccessible */state[/* inaccessible */5],
                  /* reserved */state[/* reserved */6],
                  /* keyChains */state[/* keyChains */7],
                  /* payoutProcesses */state[/* payoutProcesses */8],
                  /* activatedKeyChain */state[/* activatedKeyChain */9],
                  /* exposedCoordinates */state[/* exposedCoordinates */10],
                  /* addressInfos */state[/* addressInfos */11],
                  /* currentCustodians */state[/* currentCustodians */12]
                ]
              ];
    case 4 : 
        var accountInaccessible = Belt_Map.getWithDefault(state[/* inaccessible */5], accountIdx, Belt_MapString.empty);
        var inputs$2 = Belt_MapString.get(accountInaccessible, address);
        return /* tuple */[
                inputs$2,
                /* record */[
                  /* network */state[/* network */0],
                  /* spendable */state[/* spendable */1],
                  /* oldSpendable */state[/* oldSpendable */2],
                  /* unlocked */state[/* unlocked */3],
                  /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                  /* inaccessible */Belt_Map.set(state[/* inaccessible */5], accountIdx, Belt_MapString.remove(accountInaccessible, address)),
                  /* reserved */state[/* reserved */6],
                  /* keyChains */state[/* keyChains */7],
                  /* payoutProcesses */state[/* payoutProcesses */8],
                  /* activatedKeyChain */state[/* activatedKeyChain */9],
                  /* exposedCoordinates */state[/* exposedCoordinates */10],
                  /* addressInfos */state[/* addressInfos */11],
                  /* currentCustodians */state[/* currentCustodians */12]
                ]
              ];
    
  }
  if (exit === 1) {
    var accountOldSpendable = Belt_Map.getWithDefault(state[/* oldSpendable */2], accountIdx, Belt_MapString.empty);
    var inputs$3 = Belt_MapString.get(accountOldSpendable, address);
    return /* tuple */[
            inputs$3,
            /* record */[
              /* network */state[/* network */0],
              /* spendable */state[/* spendable */1],
              /* oldSpendable */Belt_Map.set(state[/* oldSpendable */2], accountIdx, Belt_MapString.remove(accountOldSpendable, address)),
              /* unlocked */state[/* unlocked */3],
              /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
              /* inaccessible */state[/* inaccessible */5],
              /* reserved */state[/* reserved */6],
              /* keyChains */state[/* keyChains */7],
              /* payoutProcesses */state[/* payoutProcesses */8],
              /* activatedKeyChain */state[/* activatedKeyChain */9],
              /* exposedCoordinates */state[/* exposedCoordinates */10],
              /* addressInfos */state[/* addressInfos */11],
              /* currentCustodians */state[/* currentCustodians */12]
            ]
          ];
  }
  
}

function determinAddressStatus(currentCustodians, addressCustodians, nCoSigners) {
  if (Belt_Set.eq(addressCustodians, currentCustodians)) {
    return /* Accessible */0;
  } else {
    var intersection = Belt_Set.intersect(currentCustodians, addressCustodians);
    var nIntersect = Belt_Set.size(intersection);
    if (nIntersect === 0) {
      return /* Inaccessible */4;
    } else if (nIntersect < nCoSigners) {
      return /* TemporarilyInaccessible */3;
    } else if (nIntersect === nCoSigners) {
      return /* AtRisk */1;
    } else {
      return /* OutdatedCustodians */2;
    }
  }
}

function updateAddressInfos(accountIdx, currentCustodians, state) {
  var custodians = Belt_Map.getWithDefault(currentCustodians, accountIdx, PrimitiveTypes.UserId[/* emptySet */9]);
  var updates = /* record */[/* contents : [] */0];
  var state_000 = /* network */state[/* network */0];
  var state_001 = /* spendable */state[/* spendable */1];
  var state_002 = /* oldSpendable */state[/* oldSpendable */2];
  var state_003 = /* unlocked */state[/* unlocked */3];
  var state_004 = /* temporarilyInaccessible */state[/* temporarilyInaccessible */4];
  var state_005 = /* inaccessible */state[/* inaccessible */5];
  var state_006 = /* reserved */state[/* reserved */6];
  var state_007 = /* keyChains */state[/* keyChains */7];
  var state_008 = /* payoutProcesses */state[/* payoutProcesses */8];
  var state_009 = /* activatedKeyChain */state[/* activatedKeyChain */9];
  var state_010 = /* exposedCoordinates */state[/* exposedCoordinates */10];
  var state_011 = /* addressInfos */Belt_Map.updateU(state[/* addressInfos */11], accountIdx, (function (infos) {
          var infos$1 = Js_option.getWithDefault(/* [] */0, infos);
          return Belt_List.mapU(infos$1, (function (info) {
                        var newStatus = determinAddressStatus(custodians, info[/* custodians */1], info[/* nCoSigners */4]);
                        if (newStatus !== info[/* addressStatus */5]) {
                          updates[0] = /* :: */[
                            /* tuple */[
                              info[/* address */3],
                              newStatus,
                              info[/* addressStatus */5]
                            ],
                            updates[0]
                          ];
                        }
                        return /* record */[
                                /* addressType */info[/* addressType */0],
                                /* custodians */info[/* custodians */1],
                                /* usingHardwareKey */info[/* usingHardwareKey */2],
                                /* address */info[/* address */3],
                                /* nCoSigners */info[/* nCoSigners */4],
                                /* addressStatus */newStatus,
                                /* balance */info[/* balance */6]
                              ];
                      }));
        }));
  var state_012 = /* currentCustodians */state[/* currentCustodians */12];
  var state$1 = /* record */[
    state_000,
    state_001,
    state_002,
    state_003,
    state_004,
    state_005,
    state_006,
    state_007,
    state_008,
    state_009,
    state_010,
    state_011,
    state_012
  ];
  return Belt_List.reduceU(updates[0], state$1, (function (state, param) {
                var accountIdx$1 = accountIdx;
                var address = param[0];
                var newStatus = param[1];
                var oldStatus = param[2];
                var state$1 = state;
                var match = removeAddressFrom(accountIdx$1, address, oldStatus, state$1);
                var state$2 = match[1];
                var inputs = match[0];
                if (inputs !== undefined) {
                  var accountIdx$2 = accountIdx$1;
                  var address$1 = address;
                  var status = newStatus;
                  var inputs$1 = inputs;
                  var state$3 = state$2;
                  var exit = 0;
                  switch (status) {
                    case 0 : 
                        return /* record */[
                                /* network */state$3[/* network */0],
                                /* spendable */Belt_Map.updateU(state$3[/* spendable */1], accountIdx$2, (function (map) {
                                        var map$1 = Js_option.getWithDefault(Belt_MapString.empty, map);
                                        return Caml_option.some(Belt_MapString.set(map$1, address$1, inputs$1));
                                      })),
                                /* oldSpendable */state$3[/* oldSpendable */2],
                                /* unlocked */state$3[/* unlocked */3],
                                /* temporarilyInaccessible */state$3[/* temporarilyInaccessible */4],
                                /* inaccessible */state$3[/* inaccessible */5],
                                /* reserved */state$3[/* reserved */6],
                                /* keyChains */state$3[/* keyChains */7],
                                /* payoutProcesses */state$3[/* payoutProcesses */8],
                                /* activatedKeyChain */state$3[/* activatedKeyChain */9],
                                /* exposedCoordinates */state$3[/* exposedCoordinates */10],
                                /* addressInfos */state$3[/* addressInfos */11],
                                /* currentCustodians */state$3[/* currentCustodians */12]
                              ];
                    case 1 : 
                    case 2 : 
                        exit = 1;
                        break;
                    case 3 : 
                        return /* record */[
                                /* network */state$3[/* network */0],
                                /* spendable */state$3[/* spendable */1],
                                /* oldSpendable */state$3[/* oldSpendable */2],
                                /* unlocked */state$3[/* unlocked */3],
                                /* temporarilyInaccessible */Belt_Map.updateU(state$3[/* temporarilyInaccessible */4], accountIdx$2, (function (map) {
                                        var map$1 = Js_option.getWithDefault(Belt_MapString.empty, map);
                                        return Caml_option.some(Belt_MapString.set(map$1, address$1, inputs$1));
                                      })),
                                /* inaccessible */state$3[/* inaccessible */5],
                                /* reserved */state$3[/* reserved */6],
                                /* keyChains */state$3[/* keyChains */7],
                                /* payoutProcesses */state$3[/* payoutProcesses */8],
                                /* activatedKeyChain */state$3[/* activatedKeyChain */9],
                                /* exposedCoordinates */state$3[/* exposedCoordinates */10],
                                /* addressInfos */state$3[/* addressInfos */11],
                                /* currentCustodians */state$3[/* currentCustodians */12]
                              ];
                    case 4 : 
                        return /* record */[
                                /* network */state$3[/* network */0],
                                /* spendable */state$3[/* spendable */1],
                                /* oldSpendable */state$3[/* oldSpendable */2],
                                /* unlocked */state$3[/* unlocked */3],
                                /* temporarilyInaccessible */state$3[/* temporarilyInaccessible */4],
                                /* inaccessible */Belt_Map.updateU(state$3[/* inaccessible */5], accountIdx$2, (function (map) {
                                        var map$1 = Js_option.getWithDefault(Belt_MapString.empty, map);
                                        return Caml_option.some(Belt_MapString.set(map$1, address$1, inputs$1));
                                      })),
                                /* reserved */state$3[/* reserved */6],
                                /* keyChains */state$3[/* keyChains */7],
                                /* payoutProcesses */state$3[/* payoutProcesses */8],
                                /* activatedKeyChain */state$3[/* activatedKeyChain */9],
                                /* exposedCoordinates */state$3[/* exposedCoordinates */10],
                                /* addressInfos */state$3[/* addressInfos */11],
                                /* currentCustodians */state$3[/* currentCustodians */12]
                              ];
                    
                  }
                  if (exit === 1) {
                    return /* record */[
                            /* network */state$3[/* network */0],
                            /* spendable */state$3[/* spendable */1],
                            /* oldSpendable */Belt_Map.updateU(state$3[/* oldSpendable */2], accountIdx$2, (function (map) {
                                    var map$1 = Js_option.getWithDefault(Belt_MapString.empty, map);
                                    return Caml_option.some(Belt_MapString.set(map$1, address$1, inputs$1));
                                  })),
                            /* unlocked */state$3[/* unlocked */3],
                            /* temporarilyInaccessible */state$3[/* temporarilyInaccessible */4],
                            /* inaccessible */state$3[/* inaccessible */5],
                            /* reserved */state$3[/* reserved */6],
                            /* keyChains */state$3[/* keyChains */7],
                            /* payoutProcesses */state$3[/* payoutProcesses */8],
                            /* activatedKeyChain */state$3[/* activatedKeyChain */9],
                            /* exposedCoordinates */state$3[/* exposedCoordinates */10],
                            /* addressInfos */state$3[/* addressInfos */11],
                            /* currentCustodians */state$3[/* currentCustodians */12]
                          ];
                  }
                  
                } else {
                  return state$2;
                }
              }));
}

function addInputToUtxoMap(accountIdx, input, inputMap) {
  return Belt_Map.updateU(inputMap, accountIdx, (function (map) {
                var map$1 = Js_option.getWithDefault(Belt_MapString.empty, map);
                return Caml_option.some(Belt_MapString.updateU(map$1, input[/* address */2], (function (set) {
                                  var set$1 = Js_option.getWithDefault(/* [] */0, set);
                                  return /* :: */[
                                          input,
                                          set$1
                                        ];
                                })));
              }));
}

function addTxInput(addressStatus, accountIdx, input, state) {
  var exit = 0;
  switch (addressStatus) {
    case 0 : 
        return /* record */[
                /* network */state[/* network */0],
                /* spendable */addInputToUtxoMap(accountIdx, input, state[/* spendable */1]),
                /* oldSpendable */state[/* oldSpendable */2],
                /* unlocked */state[/* unlocked */3],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                /* inaccessible */state[/* inaccessible */5],
                /* reserved */state[/* reserved */6],
                /* keyChains */state[/* keyChains */7],
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* activatedKeyChain */state[/* activatedKeyChain */9],
                /* exposedCoordinates */state[/* exposedCoordinates */10],
                /* addressInfos */state[/* addressInfos */11],
                /* currentCustodians */state[/* currentCustodians */12]
              ];
    case 1 : 
    case 2 : 
        exit = 1;
        break;
    case 3 : 
        return /* record */[
                /* network */state[/* network */0],
                /* spendable */state[/* spendable */1],
                /* oldSpendable */state[/* oldSpendable */2],
                /* unlocked */state[/* unlocked */3],
                /* temporarilyInaccessible */addInputToUtxoMap(accountIdx, input, state[/* temporarilyInaccessible */4]),
                /* inaccessible */state[/* inaccessible */5],
                /* reserved */state[/* reserved */6],
                /* keyChains */state[/* keyChains */7],
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* activatedKeyChain */state[/* activatedKeyChain */9],
                /* exposedCoordinates */state[/* exposedCoordinates */10],
                /* addressInfos */state[/* addressInfos */11],
                /* currentCustodians */state[/* currentCustodians */12]
              ];
    case 4 : 
        return /* record */[
                /* network */state[/* network */0],
                /* spendable */state[/* spendable */1],
                /* oldSpendable */state[/* oldSpendable */2],
                /* unlocked */state[/* unlocked */3],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                /* inaccessible */addInputToUtxoMap(accountIdx, input, state[/* inaccessible */5]),
                /* reserved */state[/* reserved */6],
                /* keyChains */state[/* keyChains */7],
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* activatedKeyChain */state[/* activatedKeyChain */9],
                /* exposedCoordinates */state[/* exposedCoordinates */10],
                /* addressInfos */state[/* addressInfos */11],
                /* currentCustodians */state[/* currentCustodians */12]
              ];
    
  }
  if (exit === 1) {
    return /* record */[
            /* network */state[/* network */0],
            /* spendable */state[/* spendable */1],
            /* oldSpendable */addInputToUtxoMap(accountIdx, input, state[/* oldSpendable */2]),
            /* unlocked */state[/* unlocked */3],
            /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
            /* inaccessible */state[/* inaccessible */5],
            /* reserved */state[/* reserved */6],
            /* keyChains */state[/* keyChains */7],
            /* payoutProcesses */state[/* payoutProcesses */8],
            /* activatedKeyChain */state[/* activatedKeyChain */9],
            /* exposedCoordinates */state[/* exposedCoordinates */10],
            /* addressInfos */state[/* addressInfos */11],
            /* currentCustodians */state[/* currentCustodians */12]
          ];
  }
  
}

function addToBalance(accountIdx, address, amount, state) {
  return /* record */[
          /* network */state[/* network */0],
          /* spendable */state[/* spendable */1],
          /* oldSpendable */state[/* oldSpendable */2],
          /* unlocked */state[/* unlocked */3],
          /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
          /* inaccessible */state[/* inaccessible */5],
          /* reserved */state[/* reserved */6],
          /* keyChains */state[/* keyChains */7],
          /* payoutProcesses */state[/* payoutProcesses */8],
          /* activatedKeyChain */state[/* activatedKeyChain */9],
          /* exposedCoordinates */state[/* exposedCoordinates */10],
          /* addressInfos */Belt_Map.updateU(state[/* addressInfos */11], accountIdx, (function (infos) {
                  return Belt_List.mapU(Js_option.getWithDefault(/* [] */0, infos), (function (info) {
                                var match = info[/* address */3] === address;
                                if (match) {
                                  return /* record */[
                                          /* addressType */info[/* addressType */0],
                                          /* custodians */info[/* custodians */1],
                                          /* usingHardwareKey */info[/* usingHardwareKey */2],
                                          /* address */info[/* address */3],
                                          /* nCoSigners */info[/* nCoSigners */4],
                                          /* addressStatus */info[/* addressStatus */5],
                                          /* balance */amount.plus(info[/* balance */6])
                                        ];
                                } else {
                                  return info;
                                }
                              }));
                })),
          /* currentCustodians */state[/* currentCustodians */12]
        ];
}

function removeInputFromUtxoMap(accountIdx, input, inputMap) {
  return Belt_Map.updateU(inputMap, accountIdx, (function (map) {
                var map$1 = Belt_MapString.updateU(Js_option.getWithDefault(Belt_MapString.empty, map), input[/* address */2], (function (list_) {
                        var list_$1 = Js_option.getWithDefault(/* [] */0, list_);
                        var res = Belt_List.keepU(list_$1, (function (in_) {
                                return Network.TxInputCmp[/* compareInputs */0](in_, input) !== 0;
                              }));
                        var match = Belt_List.length(res) > 0;
                        if (match) {
                          return res;
                        }
                        
                      }));
                var match = Belt_MapString.size(map$1) > 0;
                if (match) {
                  return Caml_option.some(map$1);
                }
                
              }));
}

function removeInput(accountIdx, input, state) {
  var info = addressInfoFor(accountIdx, input[/* address */2], state);
  var match = info[/* addressStatus */5];
  var exit = 0;
  switch (match) {
    case 0 : 
        return /* record */[
                /* network */state[/* network */0],
                /* spendable */removeInputFromUtxoMap(accountIdx, input, state[/* spendable */1]),
                /* oldSpendable */state[/* oldSpendable */2],
                /* unlocked */state[/* unlocked */3],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                /* inaccessible */state[/* inaccessible */5],
                /* reserved */state[/* reserved */6],
                /* keyChains */state[/* keyChains */7],
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* activatedKeyChain */state[/* activatedKeyChain */9],
                /* exposedCoordinates */state[/* exposedCoordinates */10],
                /* addressInfos */state[/* addressInfos */11],
                /* currentCustodians */state[/* currentCustodians */12]
              ];
    case 1 : 
    case 2 : 
        exit = 1;
        break;
    case 3 : 
        return /* record */[
                /* network */state[/* network */0],
                /* spendable */state[/* spendable */1],
                /* oldSpendable */state[/* oldSpendable */2],
                /* unlocked */state[/* unlocked */3],
                /* temporarilyInaccessible */removeInputFromUtxoMap(accountIdx, input, state[/* temporarilyInaccessible */4]),
                /* inaccessible */state[/* inaccessible */5],
                /* reserved */state[/* reserved */6],
                /* keyChains */state[/* keyChains */7],
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* activatedKeyChain */state[/* activatedKeyChain */9],
                /* exposedCoordinates */state[/* exposedCoordinates */10],
                /* addressInfos */state[/* addressInfos */11],
                /* currentCustodians */state[/* currentCustodians */12]
              ];
    case 4 : 
        return /* record */[
                /* network */state[/* network */0],
                /* spendable */state[/* spendable */1],
                /* oldSpendable */state[/* oldSpendable */2],
                /* unlocked */state[/* unlocked */3],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                /* inaccessible */removeInputFromUtxoMap(accountIdx, input, state[/* inaccessible */5]),
                /* reserved */state[/* reserved */6],
                /* keyChains */state[/* keyChains */7],
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* activatedKeyChain */state[/* activatedKeyChain */9],
                /* exposedCoordinates */state[/* exposedCoordinates */10],
                /* addressInfos */state[/* addressInfos */11],
                /* currentCustodians */state[/* currentCustodians */12]
              ];
    
  }
  if (exit === 1) {
    return /* record */[
            /* network */state[/* network */0],
            /* spendable */state[/* spendable */1],
            /* oldSpendable */removeInputFromUtxoMap(accountIdx, input, state[/* oldSpendable */2]),
            /* unlocked */state[/* unlocked */3],
            /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
            /* inaccessible */state[/* inaccessible */5],
            /* reserved */state[/* reserved */6],
            /* keyChains */state[/* keyChains */7],
            /* payoutProcesses */state[/* payoutProcesses */8],
            /* activatedKeyChain */state[/* activatedKeyChain */9],
            /* exposedCoordinates */state[/* exposedCoordinates */10],
            /* addressInfos */state[/* addressInfos */11],
            /* currentCustodians */state[/* currentCustodians */12]
          ];
  }
  
}

function apply($$event, state) {
  switch ($$event.tag | 0) {
    case 0 : 
        return /* record */[
                /* network */$$event[0][/* network */8],
                /* spendable */state[/* spendable */1],
                /* oldSpendable */state[/* oldSpendable */2],
                /* unlocked */state[/* unlocked */3],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                /* inaccessible */state[/* inaccessible */5],
                /* reserved */state[/* reserved */6],
                /* keyChains */state[/* keyChains */7],
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* activatedKeyChain */state[/* activatedKeyChain */9],
                /* exposedCoordinates */state[/* exposedCoordinates */10],
                /* addressInfos */state[/* addressInfos */11],
                /* currentCustodians */state[/* currentCustodians */12]
              ];
    case 15 : 
        return /* record */[
                /* network */state[/* network */0],
                /* spendable */state[/* spendable */1],
                /* oldSpendable */state[/* oldSpendable */2],
                /* unlocked */state[/* unlocked */3],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                /* inaccessible */state[/* inaccessible */5],
                /* reserved */state[/* reserved */6],
                /* keyChains */state[/* keyChains */7],
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* activatedKeyChain : :: */[
                  /* tuple */[
                    $$event[0][/* data */2][/* accountIdx */0],
                    /* [] */0
                  ],
                  state[/* activatedKeyChain */9]
                ],
                /* exposedCoordinates */state[/* exposedCoordinates */10],
                /* addressInfos */state[/* addressInfos */11],
                /* currentCustodians */state[/* currentCustodians */12]
              ];
    case 19 : 
        var match = $$event[0][/* data */2];
        var accountIdx = match[/* accountIdx */3];
        var partnerId = match[/* partnerId */0];
        var currentCustodians = Belt_Map.updateU(state[/* currentCustodians */12], accountIdx, (function (custodians) {
                return Caml_option.some(Belt_Set.add(Js_option.getWithDefault(PrimitiveTypes.UserId[/* emptySet */9], custodians), partnerId));
              }));
        return updateAddressInfos(accountIdx, currentCustodians, /* record */[
                    /* network */state[/* network */0],
                    /* spendable */state[/* spendable */1],
                    /* oldSpendable */state[/* oldSpendable */2],
                    /* unlocked */state[/* unlocked */3],
                    /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                    /* inaccessible */state[/* inaccessible */5],
                    /* reserved */state[/* reserved */6],
                    /* keyChains */state[/* keyChains */7],
                    /* payoutProcesses */state[/* payoutProcesses */8],
                    /* activatedKeyChain */state[/* activatedKeyChain */9],
                    /* exposedCoordinates */state[/* exposedCoordinates */10],
                    /* addressInfos */state[/* addressInfos */11],
                    /* currentCustodians */currentCustodians
                  ]);
    case 24 : 
        var match$1 = $$event[0][/* data */2];
        var accountIdx$1 = match$1[/* accountIdx */1];
        var custodianId = match$1[/* custodianId */0];
        var currentCustodians$1 = Belt_Map.updateU(state[/* currentCustodians */12], accountIdx$1, (function (custodians) {
                return Caml_option.some(Belt_Set.remove(Js_option.getWithDefault(PrimitiveTypes.UserId[/* emptySet */9], custodians), custodianId));
              }));
        return updateAddressInfos(accountIdx$1, currentCustodians$1, /* record */[
                    /* network */state[/* network */0],
                    /* spendable */state[/* spendable */1],
                    /* oldSpendable */state[/* oldSpendable */2],
                    /* unlocked */state[/* unlocked */3],
                    /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                    /* inaccessible */state[/* inaccessible */5],
                    /* reserved */state[/* reserved */6],
                    /* keyChains */state[/* keyChains */7],
                    /* payoutProcesses */state[/* payoutProcesses */8],
                    /* activatedKeyChain */state[/* activatedKeyChain */9],
                    /* exposedCoordinates */state[/* exposedCoordinates */10],
                    /* addressInfos */state[/* addressInfos */11],
                    /* currentCustodians */currentCustodians$1
                  ]);
    case 26 : 
        var match$2 = $$event[0];
        var payoutTx = match$2[/* data */6][/* payoutTx */1];
        var changeAddress = payoutTx[/* changeAddress */3];
        var usedInputs = payoutTx[/* usedInputs */1];
        var processId = match$2[/* processId */0];
        var accountIdx$2 = Address.Coordinates[/* accountIdx */3](Belt_Array.getExn(usedInputs, 0)[/* coordinates */6]);
        return /* record */[
                /* network */state[/* network */0],
                /* spendable */state[/* spendable */1],
                /* oldSpendable */state[/* oldSpendable */2],
                /* unlocked */state[/* unlocked */3],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                /* inaccessible */state[/* inaccessible */5],
                /* reserved */Belt_Map.updateU(state[/* reserved */6], accountIdx$2, (function (reserved) {
                        var reserved$1 = Js_option.getWithDefault(Network.inputMap(/* () */0), reserved);
                        return Caml_option.some(Belt_Array.reduceU(usedInputs, reserved$1, (function (lookup, input) {
                                          return Belt_Map.updateU(lookup, input, (function (processes) {
                                                        return Caml_option.some(Belt_Set.add(Js_option.getWithDefault(PrimitiveTypes.ProcessId[/* emptySet */9], processes), processId));
                                                      }));
                                        })));
                      })),
                /* keyChains */state[/* keyChains */7],
                /* payoutProcesses */Belt_Map.set(state[/* payoutProcesses */8], processId, payoutTx),
                /* activatedKeyChain */state[/* activatedKeyChain */9],
                /* exposedCoordinates */changeAddress !== undefined ? /* :: */[
                    changeAddress[/* coordinates */2],
                    state[/* exposedCoordinates */10]
                  ] : state[/* exposedCoordinates */10],
                /* addressInfos */state[/* addressInfos */11],
                /* currentCustodians */state[/* currentCustodians */12]
              ];
    case 30 : 
        var processId$1 = $$event[0][/* processId */0];
        var payoutTx$1 = Belt_Map.getExn(state[/* payoutProcesses */8], processId$1);
        var accountIdx$3 = Address.Coordinates[/* accountIdx */3](Belt_Array.getExn(payoutTx$1[/* usedInputs */1], 0)[/* coordinates */6]);
        var reserved = removeInputsFromReserved(accountIdx$3, processId$1, payoutTx$1[/* usedInputs */1], state[/* reserved */6]);
        return /* record */[
                /* network */state[/* network */0],
                /* spendable */state[/* spendable */1],
                /* oldSpendable */state[/* oldSpendable */2],
                /* unlocked */state[/* unlocked */3],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                /* inaccessible */state[/* inaccessible */5],
                /* reserved */reserved,
                /* keyChains */state[/* keyChains */7],
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* activatedKeyChain */state[/* activatedKeyChain */9],
                /* exposedCoordinates */state[/* exposedCoordinates */10],
                /* addressInfos */state[/* addressInfos */11],
                /* currentCustodians */state[/* currentCustodians */12]
              ];
    case 31 : 
        var processId$2 = $$event[0][/* processId */0];
        var payoutTx$2 = Belt_Map.getExn(state[/* payoutProcesses */8], processId$2);
        var accountIdx$4 = Address.Coordinates[/* accountIdx */3](Belt_Array.getExn(payoutTx$2[/* usedInputs */1], 0)[/* coordinates */6]);
        var reserved$1 = removeInputsFromReserved(accountIdx$4, processId$2, payoutTx$2[/* usedInputs */1], state[/* reserved */6]);
        return /* record */[
                /* network */state[/* network */0],
                /* spendable */state[/* spendable */1],
                /* oldSpendable */state[/* oldSpendable */2],
                /* unlocked */state[/* unlocked */3],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                /* inaccessible */state[/* inaccessible */5],
                /* reserved */reserved$1,
                /* keyChains */state[/* keyChains */7],
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* activatedKeyChain */state[/* activatedKeyChain */9],
                /* exposedCoordinates */state[/* exposedCoordinates */10],
                /* addressInfos */state[/* addressInfos */11],
                /* currentCustodians */state[/* currentCustodians */12]
              ];
    case 34 : 
        var match$3 = $$event[0];
        var processId$3 = match$3[/* processId */0];
        var payoutTx$3 = Belt_Map.getExn(state[/* payoutProcesses */8], processId$3);
        var accountIdx$5 = Address.Coordinates[/* accountIdx */3](Belt_Array.getExn(payoutTx$3[/* usedInputs */1], 0)[/* coordinates */6]);
        var reserved$2 = removeInputsFromReserved(accountIdx$5, processId$3, payoutTx$3[/* usedInputs */1], state[/* reserved */6]);
        var unlocked = Belt_Map.updateU(state[/* unlocked */3], accountIdx$5, (function (unlockedInputs) {
                if (unlockedInputs !== undefined) {
                  var unlockedInputs$1 = Belt_Array.reduce(payoutTx$3[/* usedInputs */1], Caml_option.valFromOption(unlockedInputs), Belt_Set.remove);
                  var match = Belt_Set.size(unlockedInputs$1) === 0;
                  if (match) {
                    return undefined;
                  } else {
                    return Caml_option.some(unlockedInputs$1);
                  }
                }
                
              }));
        var match$4 = PayoutTransaction.txInputForChangeAddress(match$3[/* txId */1], state[/* network */0], payoutTx$3);
        var state$1;
        if (match$4 !== undefined) {
          var changeInput = match$4;
          var match$5 = Belt_Array.unzip(Belt_List.toArray(Belt_List.mapU(AccountKeyChain.Collection[/* lookup */2](accountIdx$5, Address.Coordinates[/* keyChainIdent */4](changeInput[/* coordinates */6]), state[/* keyChains */7])[/* custodianKeyChains */4], (function (param) {
                          var userId = param[0];
                          return /* tuple */[
                                  userId,
                                  Utils.mapOption((function (param) {
                                          return userId;
                                        }), CustodianKeyChain.hardwareId(param[1]))
                                ];
                        }))));
          var custodians = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], match$5[0]);
          var usingHardwareKey = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], Belt_Array.keepMapU(match$5[1], (function (a) {
                      return a;
                    })));
          var addressStatus = determinAddressStatus(Belt_Map.getExn(state[/* currentCustodians */12], accountIdx$5), custodians, changeInput[/* nCoSigners */4]);
          state$1 = addToBalance(accountIdx$5, changeInput[/* address */2], changeInput[/* value */3], addTxInput(addressStatus, accountIdx$5, changeInput, /* record */[
                    /* network */state[/* network */0],
                    /* spendable */state[/* spendable */1],
                    /* oldSpendable */state[/* oldSpendable */2],
                    /* unlocked */state[/* unlocked */3],
                    /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                    /* inaccessible */state[/* inaccessible */5],
                    /* reserved */state[/* reserved */6],
                    /* keyChains */state[/* keyChains */7],
                    /* payoutProcesses */state[/* payoutProcesses */8],
                    /* activatedKeyChain */state[/* activatedKeyChain */9],
                    /* exposedCoordinates */state[/* exposedCoordinates */10],
                    /* addressInfos */Belt_Map.updateU(state[/* addressInfos */11], accountIdx$5, (function (infos) {
                            var infos$1 = Js_option.getWithDefault(/* [] */0, infos);
                            return /* :: */[
                                    /* record */[
                                      /* addressType : Change */0,
                                      /* custodians */custodians,
                                      /* usingHardwareKey */usingHardwareKey,
                                      /* address */changeInput[/* address */2],
                                      /* nCoSigners */changeInput[/* nCoSigners */4],
                                      /* addressStatus */addressStatus,
                                      /* balance */BTC.zero
                                    ],
                                    infos$1
                                  ];
                          })),
                    /* currentCustodians */state[/* currentCustodians */12]
                  ]));
        } else {
          state$1 = state;
        }
        var init = Belt_Array.reduceU(payoutTx$3[/* usedInputs */1], state$1, (function (state, input) {
                return addToBalance(accountIdx$5, input[/* address */2], BTC.timesRounded(input[/* value */3], -1), removeInput(accountIdx$5, input, state));
              }));
        return /* record */[
                /* network */init[/* network */0],
                /* spendable */init[/* spendable */1],
                /* oldSpendable */init[/* oldSpendable */2],
                /* unlocked */unlocked,
                /* temporarilyInaccessible */init[/* temporarilyInaccessible */4],
                /* inaccessible */init[/* inaccessible */5],
                /* reserved */reserved$2,
                /* keyChains */init[/* keyChains */7],
                /* payoutProcesses */init[/* payoutProcesses */8],
                /* activatedKeyChain */init[/* activatedKeyChain */9],
                /* exposedCoordinates */init[/* exposedCoordinates */10],
                /* addressInfos */init[/* addressInfos */11],
                /* currentCustodians */init[/* currentCustodians */12]
              ];
    case 36 : 
        var processId$4 = $$event[0][/* processId */0];
        var payoutTx$4 = Belt_Map.getExn(state[/* payoutProcesses */8], processId$4);
        var accountIdx$6 = Address.Coordinates[/* accountIdx */3](Belt_Array.getExn(payoutTx$4[/* usedInputs */1], 0)[/* coordinates */6]);
        var reserved$3 = removeInputsFromReserved(accountIdx$6, processId$4, payoutTx$4[/* usedInputs */1], state[/* reserved */6]);
        return /* record */[
                /* network */state[/* network */0],
                /* spendable */state[/* spendable */1],
                /* oldSpendable */state[/* oldSpendable */2],
                /* unlocked */state[/* unlocked */3],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                /* inaccessible */state[/* inaccessible */5],
                /* reserved */reserved$3,
                /* keyChains */state[/* keyChains */7],
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* activatedKeyChain */state[/* activatedKeyChain */9],
                /* exposedCoordinates */state[/* exposedCoordinates */10],
                /* addressInfos */state[/* addressInfos */11],
                /* currentCustodians */state[/* currentCustodians */12]
              ];
    case 38 : 
        return /* record */[
                /* network */state[/* network */0],
                /* spendable */state[/* spendable */1],
                /* oldSpendable */state[/* oldSpendable */2],
                /* unlocked */state[/* unlocked */3],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                /* inaccessible */state[/* inaccessible */5],
                /* reserved */state[/* reserved */6],
                /* keyChains */AccountKeyChain.Collection[/* add */1]($$event[0][/* keyChain */0], state[/* keyChains */7]),
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* activatedKeyChain */state[/* activatedKeyChain */9],
                /* exposedCoordinates */state[/* exposedCoordinates */10],
                /* addressInfos */state[/* addressInfos */11],
                /* currentCustodians */state[/* currentCustodians */12]
              ];
    case 39 : 
        var match$6 = $$event[0];
        var accountIdx$7 = match$6[/* accountIdx */0];
        return /* record */[
                /* network */state[/* network */0],
                /* spendable */state[/* spendable */1],
                /* oldSpendable */state[/* oldSpendable */2],
                /* unlocked */state[/* unlocked */3],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                /* inaccessible */state[/* inaccessible */5],
                /* reserved */state[/* reserved */6],
                /* keyChains */state[/* keyChains */7],
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* activatedKeyChain : :: */[
                  /* tuple */[
                    accountIdx$7,
                    /* :: */[
                      /* tuple */[
                        match$6[/* custodianId */1],
                        match$6[/* identifier */2]
                      ],
                      Js_option.getExn(Belt_List.getAssoc(state[/* activatedKeyChain */9], accountIdx$7, WalletTypes.AccountIndex[/* eq */7]))
                    ]
                  ],
                  Belt_List.removeAssoc(state[/* activatedKeyChain */9], accountIdx$7, WalletTypes.AccountIndex[/* eq */7])
                ],
                /* exposedCoordinates */state[/* exposedCoordinates */10],
                /* addressInfos */state[/* addressInfos */11],
                /* currentCustodians */state[/* currentCustodians */12]
              ];
    case 40 : 
        var match$7 = $$event[0];
        var match$8 = match$7[/* address */1];
        var displayAddress = match$8[/* displayAddress */5];
        var coordinates = match$8[/* coordinates */2];
        var nCoSigners = match$8[/* nCoSigners */0];
        var partnerId$1 = match$7[/* partnerId */0];
        var accountIdx$8 = Address.Coordinates[/* accountIdx */3](coordinates);
        var match$9 = Belt_Array.unzip(Belt_List.toArray(Belt_List.mapU(AccountKeyChain.Collection[/* lookup */2](accountIdx$8, Address.Coordinates[/* keyChainIdent */4](coordinates), state[/* keyChains */7])[/* custodianKeyChains */4], (function (param) {
                        var userId = param[0];
                        return /* tuple */[
                                userId,
                                Utils.mapOption((function (param) {
                                        return userId;
                                      }), CustodianKeyChain.hardwareId(param[1]))
                              ];
                      }))));
        var custodians$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], match$9[0]);
        var usingHardwareKey$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], Belt_Array.keepMapU(match$9[1], (function (a) {
                    return a;
                  })));
        return /* record */[
                /* network */state[/* network */0],
                /* spendable */state[/* spendable */1],
                /* oldSpendable */state[/* oldSpendable */2],
                /* unlocked */state[/* unlocked */3],
                /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                /* inaccessible */state[/* inaccessible */5],
                /* reserved */state[/* reserved */6],
                /* keyChains */state[/* keyChains */7],
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* activatedKeyChain */state[/* activatedKeyChain */9],
                /* exposedCoordinates : :: */[
                  coordinates,
                  state[/* exposedCoordinates */10]
                ],
                /* addressInfos */Belt_Map.updateU(state[/* addressInfos */11], accountIdx$8, (function (infos) {
                        var infos$1 = Js_option.getWithDefault(/* [] */0, infos);
                        return /* :: */[
                                /* record */[
                                  /* addressType : Income */[partnerId$1],
                                  /* custodians */custodians$1,
                                  /* usingHardwareKey */usingHardwareKey$1,
                                  /* address */displayAddress,
                                  /* nCoSigners */nCoSigners,
                                  /* addressStatus */determinAddressStatus(Belt_Map.getExn(state[/* currentCustodians */12], accountIdx$8), custodians$1, nCoSigners),
                                  /* balance */BTC.zero
                                ],
                                infos$1
                              ];
                      })),
                /* currentCustodians */state[/* currentCustodians */12]
              ];
    case 41 : 
        var match$10 = $$event[0];
        var amount = match$10[/* amount */4];
        var coordinates$1 = match$10[/* coordinates */1];
        var address = match$10[/* address */0];
        var accountIdx$9 = Address.Coordinates[/* accountIdx */3](coordinates$1);
        var addressStatus$1 = addressInfoFor(accountIdx$9, address, state)[/* addressStatus */5];
        var keyChain = AccountKeyChain.Collection[/* lookup */2](accountIdx$9, Address.Coordinates[/* keyChainIdent */4](coordinates$1), state[/* keyChains */7]);
        var input_000 = /* txId */match$10[/* txId */2];
        var input_001 = /* txOutputN */match$10[/* txOutputN */3];
        var input_004 = /* nCoSigners */keyChain[/* nCoSigners */2];
        var input_005 = /* nPubKeys */Belt_List.length(keyChain[/* custodianKeyChains */4]);
        var input_007 = /* sequence */keyChain[/* sequence */3];
        var input = /* record */[
          input_000,
          input_001,
          /* address */address,
          /* value */amount,
          input_004,
          input_005,
          /* coordinates */coordinates$1,
          input_007,
          /* unlocked */false
        ];
        return addToBalance(accountIdx$9, address, amount, addTxInput(addressStatus$1, accountIdx$9, input, state));
    case 42 : 
        var input$1 = $$event[0][/* input */0];
        var accountIdx$10 = Address.Coordinates[/* accountIdx */3](input$1[/* coordinates */6]);
        var addressStatus$2 = addressInfoFor(accountIdx$10, input$1[/* address */2], state)[/* addressStatus */5];
        var doesInputExist = function (utxoMap) {
          var match = Utils.andThen((function (inputs) {
                  return Belt_MapString.get(inputs, input$1[/* address */2]);
                }), Belt_Map.get(utxoMap, accountIdx$10));
          if (match !== undefined) {
            return Belt_List.has(match, input$1, (function (in_, input) {
                          return Network.TxInputCmp[/* compareInputs */0](in_, input) === 0;
                        }));
          } else {
            return false;
          }
        };
        var tmp;
        switch (addressStatus$2) {
          case 0 : 
              tmp = doesInputExist(state[/* spendable */1]);
              break;
          case 1 : 
          case 2 : 
              tmp = doesInputExist(state[/* oldSpendable */2]);
              break;
          case 3 : 
              tmp = doesInputExist(state[/* temporarilyInaccessible */4]);
              break;
          case 4 : 
              tmp = doesInputExist(state[/* inaccessible */5]);
              break;
          
        }
        if (tmp) {
          var updateInput = function (input, utxoMap) {
            return Belt_Map.updateU(utxoMap, accountIdx$10, (function (inputs) {
                          return Caml_option.some(Belt_MapString.updateU(Js_option.getWithDefault(Belt_MapString.empty, inputs), input[/* address */2], (function (inputs) {
                                            return Belt_List.mapU(Js_option.getWithDefault(/* [] */0, inputs), (function (in_) {
                                                          var match = Network.TxInputCmp[/* compareInputs */0](in_, input) === 0;
                                                          if (match) {
                                                            return input;
                                                          } else {
                                                            return in_;
                                                          }
                                                        }));
                                          })));
                        }));
          };
          var init$1;
          var exit = 0;
          switch (addressStatus$2) {
            case 0 : 
                init$1 = /* record */[
                  /* network */state[/* network */0],
                  /* spendable */updateInput(input$1, state[/* spendable */1]),
                  /* oldSpendable */state[/* oldSpendable */2],
                  /* unlocked */state[/* unlocked */3],
                  /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                  /* inaccessible */state[/* inaccessible */5],
                  /* reserved */state[/* reserved */6],
                  /* keyChains */state[/* keyChains */7],
                  /* payoutProcesses */state[/* payoutProcesses */8],
                  /* activatedKeyChain */state[/* activatedKeyChain */9],
                  /* exposedCoordinates */state[/* exposedCoordinates */10],
                  /* addressInfos */state[/* addressInfos */11],
                  /* currentCustodians */state[/* currentCustodians */12]
                ];
                break;
            case 1 : 
            case 2 : 
                exit = 1;
                break;
            case 3 : 
                init$1 = /* record */[
                  /* network */state[/* network */0],
                  /* spendable */state[/* spendable */1],
                  /* oldSpendable */state[/* oldSpendable */2],
                  /* unlocked */state[/* unlocked */3],
                  /* temporarilyInaccessible */updateInput(input$1, state[/* temporarilyInaccessible */4]),
                  /* inaccessible */state[/* inaccessible */5],
                  /* reserved */state[/* reserved */6],
                  /* keyChains */state[/* keyChains */7],
                  /* payoutProcesses */state[/* payoutProcesses */8],
                  /* activatedKeyChain */state[/* activatedKeyChain */9],
                  /* exposedCoordinates */state[/* exposedCoordinates */10],
                  /* addressInfos */state[/* addressInfos */11],
                  /* currentCustodians */state[/* currentCustodians */12]
                ];
                break;
            case 4 : 
                init$1 = /* record */[
                  /* network */state[/* network */0],
                  /* spendable */state[/* spendable */1],
                  /* oldSpendable */state[/* oldSpendable */2],
                  /* unlocked */state[/* unlocked */3],
                  /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
                  /* inaccessible */updateInput(input$1, state[/* inaccessible */5]),
                  /* reserved */state[/* reserved */6],
                  /* keyChains */state[/* keyChains */7],
                  /* payoutProcesses */state[/* payoutProcesses */8],
                  /* activatedKeyChain */state[/* activatedKeyChain */9],
                  /* exposedCoordinates */state[/* exposedCoordinates */10],
                  /* addressInfos */state[/* addressInfos */11],
                  /* currentCustodians */state[/* currentCustodians */12]
                ];
                break;
            
          }
          if (exit === 1) {
            init$1 = /* record */[
              /* network */state[/* network */0],
              /* spendable */state[/* spendable */1],
              /* oldSpendable */updateInput(input$1, state[/* oldSpendable */2]),
              /* unlocked */state[/* unlocked */3],
              /* temporarilyInaccessible */state[/* temporarilyInaccessible */4],
              /* inaccessible */state[/* inaccessible */5],
              /* reserved */state[/* reserved */6],
              /* keyChains */state[/* keyChains */7],
              /* payoutProcesses */state[/* payoutProcesses */8],
              /* activatedKeyChain */state[/* activatedKeyChain */9],
              /* exposedCoordinates */state[/* exposedCoordinates */10],
              /* addressInfos */state[/* addressInfos */11],
              /* currentCustodians */state[/* currentCustodians */12]
            ];
          }
          return /* record */[
                  /* network */init$1[/* network */0],
                  /* spendable */init$1[/* spendable */1],
                  /* oldSpendable */init$1[/* oldSpendable */2],
                  /* unlocked */Belt_Map.updateU(state[/* unlocked */3], accountIdx$10, (function (inputs) {
                          return Caml_option.some(Belt_Set.add(Js_option.getWithDefault(Network.inputSet(/* () */0), inputs), input$1));
                        })),
                  /* temporarilyInaccessible */init$1[/* temporarilyInaccessible */4],
                  /* inaccessible */init$1[/* inaccessible */5],
                  /* reserved */init$1[/* reserved */6],
                  /* keyChains */init$1[/* keyChains */7],
                  /* payoutProcesses */init$1[/* payoutProcesses */8],
                  /* activatedKeyChain */init$1[/* activatedKeyChain */9],
                  /* exposedCoordinates */init$1[/* exposedCoordinates */10],
                  /* addressInfos */init$1[/* addressInfos */11],
                  /* currentCustodians */init$1[/* currentCustodians */12]
                ];
        } else {
          return state;
        }
        break;
    case 44 : 
        var missingTxId = $$event[0][/* txId */0];
        var scanAndRemove = function (removed, orig) {
          return Belt_Map.reduce(orig, /* tuple */[
                      removed,
                      WalletTypes.AccountIndex[/* makeMap */10](/* () */0)
                    ], (function (param, accountIdx, addressMap) {
                        var match = Belt_MapString.reduce(addressMap, /* tuple */[
                              param[0],
                              Belt_MapString.empty
                            ], (function (param, address, txInputs) {
                                var res = param[1];
                                var match = Belt_List.reduce(txInputs, /* tuple */[
                                      param[0],
                                      /* [] */0
                                    ], (function (param, input) {
                                        var value = input[/* value */3];
                                        var res = param[1];
                                        var removed = param[0];
                                        var match = input[/* txId */0] === missingTxId;
                                        if (match) {
                                          return /* tuple */[
                                                  Belt_MapString.update(removed, input[/* address */2], (function (amount) {
                                                          return Caml_option.some(amount !== undefined ? value.plus(Caml_option.valFromOption(amount)) : value);
                                                        })),
                                                  res
                                                ];
                                        } else {
                                          return /* tuple */[
                                                  removed,
                                                  /* :: */[
                                                    input,
                                                    res
                                                  ]
                                                ];
                                        }
                                      }));
                                var newTxInputs = match[1];
                                var match$1 = Belt_List.length(newTxInputs) !== 0;
                                return /* tuple */[
                                        match[0],
                                        match$1 ? Belt_MapString.set(res, address, newTxInputs) : res
                                      ];
                              }));
                        return /* tuple */[
                                match[0],
                                Belt_Map.set(param[1], accountIdx, match[1])
                              ];
                      }));
        };
        var match$11 = scanAndRemove(Belt_MapString.empty, state[/* spendable */1]);
        var match$12 = scanAndRemove(match$11[0], state[/* oldSpendable */2]);
        var unlocked$1 = Belt_Map.map(state[/* unlocked */3], (function (inputSet) {
                return Belt_Set.keep(inputSet, (function (param) {
                              return param[/* txId */0] !== missingTxId;
                            }));
              }));
        var match$13 = scanAndRemove(match$12[0], state[/* temporarilyInaccessible */4]);
        var match$14 = scanAndRemove(match$13[0], state[/* inaccessible */5]);
        var removed = match$14[0];
        var addressInfos = Belt_Map.map(state[/* addressInfos */11], (function (addressInfos) {
                return Belt_List.map(addressInfos, (function (info) {
                              var removedBalance = Belt_MapString.getWithDefault(removed, info[/* address */3], BTC.zero);
                              return /* record */[
                                      /* addressType */info[/* addressType */0],
                                      /* custodians */info[/* custodians */1],
                                      /* usingHardwareKey */info[/* usingHardwareKey */2],
                                      /* address */info[/* address */3],
                                      /* nCoSigners */info[/* nCoSigners */4],
                                      /* addressStatus */info[/* addressStatus */5],
                                      /* balance */info[/* balance */6].minus(removedBalance)
                                    ];
                            }));
              }));
        return /* record */[
                /* network */state[/* network */0],
                /* spendable */match$11[1],
                /* oldSpendable */match$12[1],
                /* unlocked */unlocked$1,
                /* temporarilyInaccessible */match$13[1],
                /* inaccessible */match$14[1],
                /* reserved */state[/* reserved */6],
                /* keyChains */state[/* keyChains */7],
                /* payoutProcesses */state[/* payoutProcesses */8],
                /* activatedKeyChain */state[/* activatedKeyChain */9],
                /* exposedCoordinates */state[/* exposedCoordinates */10],
                /* addressInfos */addressInfos,
                /* currentCustodians */state[/* currentCustodians */12]
              ];
    default:
      return state;
  }
}

exports.make = make;
exports.addressInfos = addressInfos;
exports.collidingProcesses = collidingProcesses;
exports.getPayoutTx = getPayoutTx;
exports.exposedCoordinates = exposedCoordinates;
exports.accountKeyChains = accountKeyChains;
exports.network = network;
exports.apply = apply;
exports.totalUnusedBTC = totalUnusedBTC;
exports.totalReservedBTC = totalReservedBTC;
exports.currentKeyChainIdent = currentKeyChainIdent;
exports.currentKeyChain = currentKeyChain;
exports.currentSpendableInputs = currentSpendableInputs;
exports.oldSpendableInputs = oldSpendableInputs;
exports.unlockedInputs = unlockedInputs;
exports.allUnspentInputs = allUnspentInputs;
exports.inputsFor = inputsFor;
exports.nextChangeAddress = nextChangeAddress;
/* BTC Not a pure module */

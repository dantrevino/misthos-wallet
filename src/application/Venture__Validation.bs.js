// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Event = require("./events/Event.bs.js");
var Utils = require("../utils/Utils.bs.js");
var Address = require("./wallet/Address.bs.js");
var Belt_Set = require("bs-platform/lib/js/belt_Set.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var WalletTypes = require("./wallet/WalletTypes.bs.js");
var Belt_SetString = require("bs-platform/lib/js/belt_SetString.js");
var PrimitiveTypes = require("./PrimitiveTypes.bs.js");
var AccountKeyChain = require("./wallet/AccountKeyChain.bs.js");
var AccountValidator = require("./validation/AccountValidator.bs.js");
var ProcessValidator = require("./validation/ProcessValidator.bs.js");
var CustodianKeyChain = require("./wallet/CustodianKeyChain.bs.js");
var CustodianValidator = require("./validation/CustodianValidator.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var AccountKeyChainValidator = require("./validation/AccountKeyChainValidator.bs.js");
var CustodianKeyChainValidator = require("./validation/CustodianKeyChainValidator.bs.js");

function make(param) {
  return /* record */[
          /* accountValidator */AccountValidator.make(/* () */0),
          /* custodianValidator */CustodianValidator.make(/* () */0),
          /* custodianKeyChainValidator */CustodianKeyChainValidator.make(/* () */0),
          /* accountKeyChainValidator */AccountKeyChainValidator.make(/* () */0),
          /* processValidator */ProcessValidator.make(/* () */0),
          /* systemPubKey */"",
          /* knownItems */Belt_SetString.empty,
          /* currentPartners */PrimitiveTypes.UserId[/* emptySet */9],
          /* currentPartnerPubKeys : [] */0,
          /* partnerData : [] */0,
          /* partnerAccepted : [] */0,
          /* partnerRemovalData : [] */0,
          /* partnerRemovals : [] */0,
          /* custodianData : [] */0,
          /* custodianRemovalData : [] */0,
          /* custodianRemovals : [] */0,
          /* currentCustodians : [] */0,
          /* accountCreationData : [] */0,
          /* payoutData : [] */0,
          /* creatorData : record */[
            /* lastPartnerRemovalProcess */undefined,
            /* id */PrimitiveTypes.UserId[/* fromString */1](""),
            /* pubKey */undefined
          ],
          /* custodianKeyChains : [] */0,
          /* accountKeyChains */AccountKeyChain.Collection[/* empty */0]
        ];
}

function apply(param, state) {
  var $$event = param[/* event */0];
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* accountValidator */0] = AccountValidator.update($$event, state[/* accountValidator */0]);
  newrecord[/* custodianValidator */1] = CustodianValidator.update($$event, state[/* custodianValidator */1]);
  newrecord[/* custodianKeyChainValidator */2] = CustodianKeyChainValidator.update($$event, state[/* custodianKeyChainValidator */2]);
  newrecord[/* accountKeyChainValidator */3] = AccountKeyChainValidator.update($$event, state[/* accountKeyChainValidator */3]);
  newrecord[/* processValidator */4] = ProcessValidator.update($$event, state[/* processValidator */4]);
  newrecord[/* knownItems */6] = Belt_SetString.add(state[/* knownItems */6], param[/* hash */1]);
  switch ($$event.tag | 0) {
    case 0 : 
        var match = $$event[0];
        var newrecord$1 = Caml_array.caml_array_dup(newrecord);
        newrecord$1[/* systemPubKey */5] = Utils.publicKeyFromKeyPair(match[/* systemIssuer */7]);
        newrecord$1[/* creatorData */19] = /* record */[
          /* lastPartnerRemovalProcess */undefined,
          /* id */match[/* creatorId */2],
          /* pubKey */match[/* creatorPubKey */3]
        ];
        return newrecord$1;
    case 1 : 
        var match$1 = $$event[0];
        var newrecord$2 = Caml_array.caml_array_dup(newrecord);
        newrecord$2[/* partnerData */9] = /* :: */[
          /* tuple */[
            match$1[/* processId */0],
            /* tuple */[
              match$1[/* proposerId */4],
              match$1[/* data */6]
            ]
          ],
          newrecord[/* partnerData */9]
        ];
        return newrecord$2;
    case 4 : 
        var match$2 = $$event[0];
        var data = match$2[/* data */2];
        var newrecord$3 = Caml_array.caml_array_dup(newrecord);
        newrecord$3[/* currentPartners */7] = Belt_Set.add(newrecord[/* currentPartners */7], data[/* id */1]);
        newrecord$3[/* currentPartnerPubKeys */8] = Js_option.getWithDefault(newrecord[/* currentPartnerPubKeys */8], Utils.mapOption((function (pubKey) {
                    return /* :: */[
                            /* tuple */[
                              pubKey,
                              data[/* id */1]
                            ],
                            newrecord[/* currentPartnerPubKeys */8]
                          ];
                  }), data[/* pubKey */2]));
        newrecord$3[/* partnerAccepted */10] = /* :: */[
          /* tuple */[
            data[/* id */1],
            match$2[/* processId */0]
          ],
          newrecord[/* partnerAccepted */10]
        ];
        return newrecord$3;
    case 6 : 
        var match$3 = $$event[0];
        var newrecord$4 = Caml_array.caml_array_dup(newrecord);
        newrecord$4[/* currentPartnerPubKeys */8] = /* :: */[
          /* tuple */[
            match$3[/* pubKey */1],
            match$3[/* partnerId */0]
          ],
          newrecord[/* currentPartnerPubKeys */8]
        ];
        return newrecord$4;
    case 7 : 
        var match$4 = $$event[0];
        var newrecord$5 = Caml_array.caml_array_dup(newrecord);
        newrecord$5[/* partnerRemovalData */11] = /* :: */[
          /* tuple */[
            match$4[/* processId */0],
            /* tuple */[
              match$4[/* proposerId */4],
              match$4[/* data */6]
            ]
          ],
          newrecord[/* partnerRemovalData */11]
        ];
        return newrecord$5;
    case 10 : 
        var match$5 = $$event[0];
        var id = match$5[/* data */2][/* id */0];
        var pubKey = Belt_List.getByU(newrecord[/* currentPartnerPubKeys */8], (function (param) {
                return PrimitiveTypes.UserId[/* eq */5](param[1], id);
              }));
        var newrecord$6 = Caml_array.caml_array_dup(newrecord);
        newrecord$6[/* currentPartners */7] = Belt_Set.remove(newrecord[/* currentPartners */7], id);
        newrecord$6[/* currentPartnerPubKeys */8] = pubKey !== undefined ? List.remove_assoc(pubKey[0], newrecord[/* currentPartnerPubKeys */8]) : newrecord[/* currentPartnerPubKeys */8];
        newrecord$6[/* partnerRemovals */12] = /* :: */[
          /* tuple */[
            id,
            match$5[/* processId */0]
          ],
          newrecord[/* partnerRemovals */12]
        ];
        return newrecord$6;
    case 12 : 
        var match$6 = $$event[0];
        var newrecord$7 = Caml_array.caml_array_dup(newrecord);
        newrecord$7[/* accountCreationData */17] = /* :: */[
          /* tuple */[
            match$6[/* processId */0],
            /* tuple */[
              match$6[/* proposerId */4],
              match$6[/* data */6]
            ]
          ],
          newrecord[/* accountCreationData */17]
        ];
        return newrecord$7;
    case 15 : 
        var newrecord$8 = Caml_array.caml_array_dup(newrecord);
        newrecord$8[/* currentCustodians */16] = /* :: */[
          /* tuple */[
            $$event[0][/* data */2][/* accountIdx */0],
            /* [] */0
          ],
          newrecord[/* currentCustodians */16]
        ];
        return newrecord$8;
    case 16 : 
        var match$7 = $$event[0];
        var newrecord$9 = Caml_array.caml_array_dup(newrecord);
        newrecord$9[/* custodianData */13] = /* :: */[
          /* tuple */[
            match$7[/* processId */0],
            /* tuple */[
              match$7[/* proposerId */4],
              match$7[/* data */6]
            ]
          ],
          newrecord[/* custodianData */13]
        ];
        return newrecord$9;
    case 19 : 
        var match$8 = $$event[0][/* data */2];
        var accountIdx = match$8[/* accountIdx */3];
        var partnerId = match$8[/* partnerId */0];
        var userChains;
        try {
          userChains = List.assoc(partnerId, newrecord[/* custodianKeyChains */20]);
        }
        catch (exn){
          if (exn === Caml_builtin_exceptions.not_found) {
            userChains = /* [] */0;
          } else {
            throw exn;
          }
        }
        var accountChains;
        try {
          accountChains = List.assoc(accountIdx, userChains);
        }
        catch (exn$1){
          if (exn$1 === Caml_builtin_exceptions.not_found) {
            accountChains = /* [] */0;
          } else {
            throw exn$1;
          }
        }
        var newrecord$10 = Caml_array.caml_array_dup(newrecord);
        newrecord$10[/* currentCustodians */16] = /* :: */[
          /* tuple */[
            accountIdx,
            /* :: */[
              partnerId,
              List.assoc(accountIdx, newrecord[/* currentCustodians */16])
            ]
          ],
          List.remove_assoc(accountIdx, newrecord[/* currentCustodians */16])
        ];
        newrecord$10[/* custodianKeyChains */20] = /* :: */[
          /* tuple */[
            partnerId,
            /* :: */[
              /* tuple */[
                accountIdx,
                accountChains
              ],
              List.remove_assoc(accountIdx, userChains)
            ]
          ],
          List.remove_assoc(partnerId, newrecord[/* custodianKeyChains */20])
        ];
        return newrecord$10;
    case 21 : 
        var match$9 = $$event[0];
        var newrecord$11 = Caml_array.caml_array_dup(newrecord);
        newrecord$11[/* custodianRemovalData */14] = /* :: */[
          /* tuple */[
            match$9[/* processId */0],
            /* tuple */[
              match$9[/* proposerId */4],
              match$9[/* data */6]
            ]
          ],
          newrecord[/* custodianRemovalData */14]
        ];
        return newrecord$11;
    case 24 : 
        var match$10 = $$event[0];
        var match$11 = match$10[/* data */2];
        var accountIdx$1 = match$11[/* accountIdx */1];
        var custodianId = match$11[/* custodianId */0];
        var newrecord$12 = Caml_array.caml_array_dup(newrecord);
        newrecord$12[/* custodianRemovals */15] = /* :: */[
          /* tuple */[
            custodianId,
            match$10[/* processId */0]
          ],
          newrecord[/* custodianRemovals */15]
        ];
        var partial_arg = PrimitiveTypes.UserId[/* neq */6];
        newrecord$12[/* currentCustodians */16] = /* :: */[
          /* tuple */[
            accountIdx$1,
            List.filter((function (param) {
                      return partial_arg(custodianId, param);
                    }))(List.assoc(accountIdx$1, newrecord[/* currentCustodians */16]))
          ],
          List.remove_assoc(accountIdx$1, newrecord[/* currentCustodians */16])
        ];
        return newrecord$12;
    case 26 : 
        var match$12 = $$event[0];
        var newrecord$13 = Caml_array.caml_array_dup(newrecord);
        newrecord$13[/* payoutData */18] = /* :: */[
          /* tuple */[
            match$12[/* processId */0],
            /* tuple */[
              match$12[/* proposerId */4],
              match$12[/* data */6]
            ]
          ],
          newrecord[/* payoutData */18]
        ];
        return newrecord$13;
    case 37 : 
        var match$13 = $$event[0];
        var keyChain = match$13[/* keyChain */2];
        var custodianId$1 = match$13[/* custodianId */1];
        var userChains$1;
        try {
          userChains$1 = List.assoc(custodianId$1, newrecord[/* custodianKeyChains */20]);
        }
        catch (exn$2){
          if (exn$2 === Caml_builtin_exceptions.not_found) {
            userChains$1 = /* [] */0;
          } else {
            throw exn$2;
          }
        }
        var accountChains$1;
        try {
          accountChains$1 = List.assoc(CustodianKeyChain.accountIdx(keyChain), userChains$1);
        }
        catch (exn$3){
          if (exn$3 === Caml_builtin_exceptions.not_found) {
            accountChains$1 = /* [] */0;
          } else {
            throw exn$3;
          }
        }
        var newrecord$14 = Caml_array.caml_array_dup(newrecord);
        newrecord$14[/* custodianKeyChains */20] = /* :: */[
          /* tuple */[
            custodianId$1,
            /* :: */[
              /* tuple */[
                CustodianKeyChain.accountIdx(keyChain),
                /* :: */[
                  keyChain,
                  accountChains$1
                ]
              ],
              /* [] */0
            ]
          ],
          List.remove_assoc(custodianId$1, newrecord[/* custodianKeyChains */20])
        ];
        return newrecord$14;
    case 38 : 
        var newrecord$15 = Caml_array.caml_array_dup(newrecord);
        newrecord$15[/* accountKeyChains */21] = AccountKeyChain.Collection[/* add */1]($$event[0][/* keyChain */0], newrecord[/* accountKeyChains */21]);
        return newrecord$15;
    case 2 : 
    case 3 : 
    case 8 : 
    case 9 : 
    case 13 : 
    case 14 : 
    case 17 : 
    case 18 : 
    case 22 : 
    case 23 : 
    case 27 : 
    case 28 : 
    case 29 : 
    case 39 : 
        return newrecord;
    default:
      return newrecord;
  }
}

function resultToString(param) {
  if (typeof param === "number") {
    switch (param) {
      case 0 : 
          return "Ok";
      case 1 : 
          return "Ignore";
      case 2 : 
          return "InvalidIssuer";
      case 3 : 
          return "UnknownProcessId";
      case 4 : 
          return "NotEligible";
      case 5 : 
          return "AlreadyVoted";
      case 6 : 
          return "PolicyNotFulfilled";
      case 7 : 
          return "PrematureDenial";
      case 8 : 
          return "DependencyNotMet";
      
    }
  } else {
    return "BadData('" + (param[0] + "')");
  }
}

function processExists(processId, param) {
  var match = Curry._1(param[/* processValidator */4][/* exists */2], processId);
  if (match) {
    return /* Ok */0;
  } else {
    return /* UnknownProcessId */3;
  }
}

function isEligible(processId, voterId, param) {
  var match = Curry._2(param[/* processValidator */4][/* isEligible */4], processId, voterId);
  if (match) {
    return /* Ok */0;
  } else {
    return /* NotEligible */4;
  }
}

function hasYetToVote(processId, voterId, param) {
  var match = Curry._2(param[/* processValidator */4][/* didVote */5], processId, voterId);
  if (match) {
    return /* AlreadyVoted */5;
  } else {
    return /* Ok */0;
  }
}

function policyFulfilled(processId, param) {
  var match = Curry._1(param[/* processValidator */4][/* policyFulfilled */6], processId);
  if (match) {
    return /* Ok */0;
  } else {
    return /* PolicyNotFulfilled */6;
  }
}

function policyCanNotBeFulfilled(processId, param) {
  var match = Curry._1(param[/* processValidator */4][/* canPolicyBeFulfilled */7], processId);
  if (match) {
    return /* PrematureDenial */7;
  } else {
    return /* Ok */0;
  }
}

function ensureDependencies($staropt$star, $staropt$star$1, param) {
  var processValidator = param[/* processValidator */4];
  var proposals = $staropt$star !== undefined ? Caml_option.valFromOption($staropt$star) : PrimitiveTypes.ProcessId[/* emptySet */9];
  var completions = $staropt$star$1 !== undefined ? Caml_option.valFromOption($staropt$star$1) : PrimitiveTypes.ProcessId[/* emptySet */9];
  var match = Belt_Set.every(proposals, processValidator[/* exists */2]) && Belt_Set.every(completions, processValidator[/* completed */3]);
  if (match) {
    return /* Ok */0;
  } else {
    return /* DependencyNotMet */8;
  }
}

function accountExists(accountIdx, param) {
  var match = Js_option.isSome(Curry._1(param[/* accountValidator */0][/* settings */1], accountIdx));
  if (match) {
    return /* Ok */0;
  } else {
    return /* BadData */["Account doesn't exist"];
  }
}

function isCustodian(accountIdx, custodian, param) {
  var match = Curry._2(param[/* custodianValidator */1][/* isCustodian */2], accountIdx, custodian);
  if (match) {
    return /* Ok */0;
  } else {
    return /* BadData */["Not a custodian"];
  }
}

function custodianKeyChainsExist(accountIdx, keyChains, param) {
  var match = Curry._2(param[/* custodianKeyChainValidator */2][/* allExist */1], accountIdx, keyChains);
  if (match) {
    return /* Ok */0;
  } else {
    return /* BadData */["Bad CustodianKeyChain"];
  }
}

function accountKeyChainIdentified(accountIdx, identifier, param) {
  var match = Curry._2(param[/* accountKeyChainValidator */3][/* exists */2], accountIdx, identifier);
  if (match) {
    return /* Ok */0;
  } else {
    return /* BadData */["Unknown AccountKeyChain identifier"];
  }
}

function activationSequenceInOrder(custodianId, identifier, sequence, param) {
  var match = Curry._3(param[/* accountKeyChainValidator */3][/* inOrder */3], custodianId, identifier, sequence);
  if (match) {
    return /* Ok */0;
  } else {
    return /* BadData */["AccountKeyChain sequence out of order"];
  }
}

function test(test$1, state) {
  return /* tuple */[
          Curry._1(test$1, state),
          state
        ];
}

function andThen(test, param) {
  var state = param[1];
  var res = param[0];
  if (typeof res === "number" && res === 0) {
    return /* tuple */[
            Curry._1(test, state),
            state
          ];
  } else {
    return /* tuple */[
            res,
            state
          ];
  }
}

function returnResult(param) {
  return param[0];
}

function defaultDataValidator(param, param$1) {
  return /* Ok */0;
}

function validateProposal($staropt$star, _processName, _dataList, param, state, issuerId) {
  var validateData = $staropt$star !== undefined ? $staropt$star : defaultDataValidator;
  if (PrimitiveTypes.UserId[/* neq */6](issuerId, param[/* proposerId */4])) {
    return /* InvalidIssuer */2;
  } else {
    var partial_arg = Caml_option.some(param[/* dependsOnCompletions */2]);
    var partial_arg$1 = Caml_option.some(param[/* dependsOnProposals */1]);
    var test = function (param) {
      return ensureDependencies(partial_arg$1, partial_arg, param);
    };
    return returnResult(andThen(Curry._1(validateData, param[/* data */6]), /* tuple */[
                    Curry._1(test, state),
                    state
                  ]));
  }
}

function validateRejection(param, state, issuerId) {
  var rejectorId = param[/* rejectorId */1];
  var processId = param[/* processId */0];
  var match = PrimitiveTypes.UserId[/* neq */6](issuerId, rejectorId);
  if (match) {
    return /* InvalidIssuer */2;
  } else {
    return returnResult(andThen((function (param) {
                      return hasYetToVote(processId, rejectorId, param);
                    }), andThen((function (param) {
                          return isEligible(processId, rejectorId, param);
                        }), /* tuple */[
                        processExists(processId, state),
                        state
                      ])));
  }
}

function validateEndorsement(param, state, issuerId) {
  var supporterId = param[/* supporterId */1];
  var processId = param[/* processId */0];
  var match = PrimitiveTypes.UserId[/* neq */6](issuerId, supporterId);
  if (match) {
    return /* InvalidIssuer */2;
  } else {
    return returnResult(andThen((function (param) {
                      return hasYetToVote(processId, supporterId, param);
                    }), andThen((function (param) {
                          return isEligible(processId, supporterId, param);
                        }), /* tuple */[
                        processExists(processId, state),
                        state
                      ])));
  }
}

function validateAcceptance(param, dataList, eq, state, _issuerId) {
  var dependsOnCompletions = param[/* dependsOnCompletions */1];
  var processId = param[/* processId */0];
  if (Curry._2(eq, param[/* data */2], List.assoc(processId, dataList)[1]) === false) {
    return /* BadData */["Data doesn't match proposal"];
  } else {
    return returnResult(andThen((function (eta) {
                      var arg = Caml_option.some(dependsOnCompletions);
                      return (function (param) {
                                    return (function (param$1) {
                                        return ensureDependencies(param, arg, param$1);
                                      });
                                  })(undefined)(eta);
                    }), andThen((function (param) {
                          return policyFulfilled(processId, param);
                        }), /* tuple */[
                        processExists(processId, state),
                        state
                      ])));
  }
}

function validateDenial(param, state, _issuerId) {
  var processId = param[/* processId */0];
  return returnResult(andThen((function (param) {
                    return policyCanNotBeFulfilled(processId, param);
                  }), /* tuple */[
                  processExists(processId, state),
                  state
                ]));
}

function validatePartnerData(param, param$1) {
  var id = param[/* id */1];
  if (Belt_Set.has(param$1[/* currentPartners */7], id)) {
    return /* BadData */["Partner already exists"];
  } else {
    var partnerRemovalProcess;
    try {
      partnerRemovalProcess = Caml_option.some(List.assoc(id, param$1[/* partnerRemovals */12]));
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        partnerRemovalProcess = undefined;
      } else {
        throw exn;
      }
    }
    if (Caml_obj.caml_notequal(partnerRemovalProcess, param[/* lastPartnerRemovalProcess */0])) {
      return /* BadData */["Last removal doesn't match"];
    } else {
      return /* Ok */0;
    }
  }
}

function validatePartnerRemovalData(param, param$1) {
  var id = param[/* id */0];
  if (Belt_Set.has(param$1[/* currentPartners */7], id) === false) {
    return /* BadData */["Partner with Id '" + (PrimitiveTypes.UserId[/* toString */0](id) + "' doesn't exist")];
  } else {
    try {
      var partnerProcess = List.assoc(id, param$1[/* partnerAccepted */10]);
      if (PrimitiveTypes.ProcessId[/* eq */5](partnerProcess, param[/* lastPartnerProcess */1])) {
        return /* Ok */0;
      } else {
        return /* BadData */["lastPartnerProcess doesn't match"];
      }
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        return /* BadData */["lastPartnerProcess doesn't match"];
      } else {
        throw exn;
      }
    }
  }
}

function validateCustodianData(param, param$1) {
  var accountIdx = param[/* accountIdx */3];
  var partnerId = param[/* partnerId */0];
  if (List.exists((function (param) {
            return WalletTypes.AccountIndex[/* eq */7](param[1][1][/* accountIdx */0], accountIdx);
          }), param$1[/* accountCreationData */17]) === false) {
    return /* BadData */["account doesn't exist"];
  } else {
    try {
      var pData = List.assoc(param[/* partnerApprovalProcess */1], param$1[/* partnerData */9])[1];
      if (PrimitiveTypes.UserId[/* neq */6](pData[/* id */1], partnerId)) {
        return /* BadData */["Partner approval process doesn't match user id"];
      } else {
        var custodianRemovalProcess;
        try {
          custodianRemovalProcess = Caml_option.some(List.assoc(partnerId, param$1[/* custodianRemovals */15]));
        }
        catch (exn){
          if (exn === Caml_builtin_exceptions.not_found) {
            custodianRemovalProcess = undefined;
          } else {
            throw exn;
          }
        }
        if (Caml_obj.caml_notequal(custodianRemovalProcess, param[/* lastCustodianRemovalProcess */2])) {
          return /* BadData */["Last removal doesn't match"];
        } else {
          return /* Ok */0;
        }
      }
    }
    catch (exn$1){
      if (exn$1 === Caml_builtin_exceptions.not_found) {
        return /* BadData */["partner approval process doesn't exist"];
      } else {
        throw exn$1;
      }
    }
  }
}

function validateCustodianRemovalData(param, param$1) {
  var accountIdx = param[/* accountIdx */1];
  var custodianId = param[/* custodianId */0];
  try {
    var match = List.exists((function (param) {
            var data = param[1][1];
            if (PrimitiveTypes.UserId[/* eq */5](data[/* partnerId */0], custodianId)) {
              return WalletTypes.AccountIndex[/* eq */7](accountIdx, data[/* accountIdx */3]);
            } else {
              return false;
            }
          }), param$1[/* custodianData */13]);
    if (match) {
      return /* Ok */0;
    } else {
      throw Caml_builtin_exceptions.not_found;
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* BadData */["Partner with Id '" + (PrimitiveTypes.UserId[/* toString */0](custodianId) + ("' is not a custodian of account with index " + String(WalletTypes.AccountIndex[/* toInt */0](accountIdx))))];
    } else {
      throw exn;
    }
  }
}

function validateAccountCreationData(param, param$1) {
  var match = WalletTypes.AccountIndex[/* toInt */0](param[/* accountIdx */0]) === List.length(param$1[/* accountCreationData */17]);
  if (match) {
    return /* Ok */0;
  } else {
    return /* BadData */["Bad Account Index"];
  }
}

function validateCustodianKeyChainUpdated(param, state, issuerId) {
  var custodianKeyChains = state[/* custodianKeyChains */20];
  var custodianData = state[/* custodianData */13];
  var processValidator = state[/* processValidator */4];
  var keyChain = param[/* keyChain */2];
  var custodianId = param[/* custodianId */1];
  var custodianApprovalProcess = param[/* custodianApprovalProcess */0];
  if (PrimitiveTypes.UserId[/* neq */6](issuerId, custodianId)) {
    return /* InvalidIssuer */2;
  } else {
    var accountIdx = CustodianKeyChain.accountIdx(keyChain);
    return returnResult(andThen((function (param) {
                      if (List.mem_assoc(custodianApprovalProcess, custodianData) === false || Curry._1(processValidator[/* completed */3], custodianApprovalProcess) === false) {
                        return /* BadData */["Bad custodianApprovalProcess"];
                      } else {
                        var match = List.assoc(custodianApprovalProcess, custodianData);
                        if (PrimitiveTypes.UserId[/* neq */6](match[1][/* partnerId */0], custodianId)) {
                          return /* BadData */["CustodianApprovalProcess is for another partner"];
                        } else if (WalletTypes.CustodianKeyChainIndex[/* neq */7](CustodianKeyChain.keyChainIdx(keyChain), WalletTypes.CustodianKeyChainIndex[/* fromInt */1](List.length(List.assoc(accountIdx, List.assoc(custodianId, custodianKeyChains)))))) {
                          return /* BadData */["CustodianKeyChainIndex isn't in order"];
                        } else {
                          return /* Ok */0;
                        }
                      }
                    }), /* tuple */[
                    accountExists(accountIdx, state),
                    state
                  ]));
  }
}

function validateAccountKeyChainIdentified(param, state, _issuerId) {
  var keyChain = param[/* keyChain */0];
  var custodianKeyChains = keyChain[/* custodianKeyChains */4];
  var accountIdx = keyChain[/* accountIdx */0];
  return returnResult(andThen((function (param) {
                    return custodianKeyChainsExist(accountIdx, custodianKeyChains, param);
                  }), andThen((function (state) {
                        var match = AccountKeyChain.isConsistent(Js_option.getExn(Curry._1(state[/* accountValidator */0][/* settings */1], accountIdx)), keyChain) === false;
                        if (match) {
                          return /* BadData */["Inconsistent AccountKeyChain"];
                        } else {
                          return /* Ok */0;
                        }
                      }), /* tuple */[
                      accountExists(accountIdx, state),
                      state
                    ])));
}

function validateAccountKeyChainActivated(param, state, issuerId) {
  var sequence = param[/* sequence */3];
  var identifier = param[/* identifier */2];
  var custodianId = param[/* custodianId */1];
  var accountIdx = param[/* accountIdx */0];
  var match = PrimitiveTypes.UserId[/* neq */6](issuerId, custodianId);
  if (match) {
    return /* InvalidIssuer */2;
  } else {
    return returnResult(andThen((function (param) {
                      return activationSequenceInOrder(custodianId, identifier, sequence, param);
                    }), andThen((function (param) {
                          return accountKeyChainIdentified(accountIdx, identifier, param);
                        }), andThen((function (param) {
                              return isCustodian(accountIdx, custodianId, param);
                            }), /* tuple */[
                            accountExists(accountIdx, state),
                            state
                          ]))));
  }
}

function validateIncomeAddressExposed(param, param$1, _issuerId) {
  var match = param[/* address */1];
  try {
    var generatedAddress = Address.find(match[/* coordinates */2], param$1[/* accountKeyChains */21]);
    if (match[/* displayAddress */5] === generatedAddress[/* displayAddress */5]) {
      return /* Ok */0;
    } else {
      return /* BadData */["Unknown Address"];
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* BadData */["Unknown Address"];
    } else {
      throw exn;
    }
  }
}

function validateEvent(param) {
  switch (param.tag | 0) {
    case 0 : 
        return (function (param, param$1) {
            return /* Ok */0;
          });
    case 1 : 
        var proposal = param[0];
        return (function (state) {
            var partial_arg = state[/* partnerData */9];
            var partial_arg$1 = $$Event.Partner[/* processName */1];
            var partial_arg$2 = validatePartnerData;
            return (function (param) {
                return validateProposal(partial_arg$2, partial_arg$1, partial_arg, proposal, state, param);
              });
          });
    case 2 : 
        var partial_arg = param[0];
        return (function (param, param$1) {
            return validateRejection(partial_arg, param, param$1);
          });
    case 4 : 
        var acceptance = param[0];
        return (function (state) {
            var partial_arg = $$Event.Partner[/* dataEq */2];
            var partial_arg$1 = state[/* partnerData */9];
            return (function (param) {
                return validateAcceptance(acceptance, partial_arg$1, partial_arg, state, param);
              });
          });
    case 5 : 
        var partial_arg$1 = param[0];
        return (function (param, param$1) {
            return validateDenial(partial_arg$1, param, param$1);
          });
    case 6 : 
        return (function (_state, _pubKey) {
            return /* Ok */0;
          });
    case 7 : 
        var proposal$1 = param[0];
        return (function (state) {
            var partial_arg = state[/* partnerRemovalData */11];
            var partial_arg$1 = $$Event.Partner[/* Removal */9][/* processName */1];
            var partial_arg$2 = validatePartnerRemovalData;
            return (function (param) {
                return validateProposal(partial_arg$2, partial_arg$1, partial_arg, proposal$1, state, param);
              });
          });
    case 8 : 
        var partial_arg$2 = param[0];
        return (function (param, param$1) {
            return validateRejection(partial_arg$2, param, param$1);
          });
    case 10 : 
        var acceptance$1 = param[0];
        return (function (state) {
            var partial_arg = $$Event.Partner[/* Removal */9][/* dataEq */2];
            var partial_arg$1 = state[/* partnerRemovalData */11];
            return (function (param) {
                return validateAcceptance(acceptance$1, partial_arg$1, partial_arg, state, param);
              });
          });
    case 11 : 
        var partial_arg$3 = param[0];
        return (function (param, param$1) {
            return validateDenial(partial_arg$3, param, param$1);
          });
    case 12 : 
        var proposal$2 = param[0];
        return (function (state) {
            var partial_arg = state[/* accountCreationData */17];
            var partial_arg$1 = $$Event.AccountCreation[/* processName */1];
            var partial_arg$2 = validateAccountCreationData;
            return (function (param) {
                return validateProposal(partial_arg$2, partial_arg$1, partial_arg, proposal$2, state, param);
              });
          });
    case 13 : 
        var partial_arg$4 = param[0];
        return (function (param, param$1) {
            return validateRejection(partial_arg$4, param, param$1);
          });
    case 15 : 
        var acceptance$2 = param[0];
        return (function (state) {
            var partial_arg = $$Event.AccountCreation[/* dataEq */2];
            var partial_arg$1 = state[/* accountCreationData */17];
            return (function (param) {
                return validateAcceptance(acceptance$2, partial_arg$1, partial_arg, state, param);
              });
          });
    case 16 : 
        var proposal$3 = param[0];
        return (function (state) {
            var partial_arg = state[/* custodianData */13];
            var partial_arg$1 = $$Event.Custodian[/* processName */1];
            var partial_arg$2 = validateCustodianData;
            return (function (param) {
                return validateProposal(partial_arg$2, partial_arg$1, partial_arg, proposal$3, state, param);
              });
          });
    case 17 : 
        var partial_arg$5 = param[0];
        return (function (param, param$1) {
            return validateRejection(partial_arg$5, param, param$1);
          });
    case 19 : 
        var acceptance$3 = param[0];
        return (function (state) {
            var partial_arg = $$Event.Custodian[/* dataEq */2];
            var partial_arg$1 = state[/* custodianData */13];
            return (function (param) {
                return validateAcceptance(acceptance$3, partial_arg$1, partial_arg, state, param);
              });
          });
    case 20 : 
        var partial_arg$6 = param[0];
        return (function (param, param$1) {
            return validateDenial(partial_arg$6, param, param$1);
          });
    case 21 : 
        var proposal$4 = param[0];
        return (function (state) {
            var partial_arg = state[/* custodianRemovalData */14];
            var partial_arg$1 = $$Event.Custodian[/* Removal */9][/* processName */1];
            var partial_arg$2 = validateCustodianRemovalData;
            return (function (param) {
                return validateProposal(partial_arg$2, partial_arg$1, partial_arg, proposal$4, state, param);
              });
          });
    case 22 : 
        var partial_arg$7 = param[0];
        return (function (param, param$1) {
            return validateRejection(partial_arg$7, param, param$1);
          });
    case 24 : 
        var acceptance$4 = param[0];
        return (function (state) {
            var partial_arg = $$Event.Custodian[/* Removal */9][/* dataEq */2];
            var partial_arg$1 = state[/* custodianRemovalData */14];
            return (function (param) {
                return validateAcceptance(acceptance$4, partial_arg$1, partial_arg, state, param);
              });
          });
    case 25 : 
        var partial_arg$8 = param[0];
        return (function (param, param$1) {
            return validateDenial(partial_arg$8, param, param$1);
          });
    case 26 : 
        var proposal$5 = param[0];
        return (function (state) {
            var partial_arg = state[/* payoutData */18];
            var partial_arg$1 = $$Event.Payout[/* processName */1];
            return (function (param) {
                return validateProposal(undefined, partial_arg$1, partial_arg, proposal$5, state, param);
              });
          });
    case 27 : 
        var partial_arg$9 = param[0];
        return (function (param, param$1) {
            return validateRejection(partial_arg$9, param, param$1);
          });
    case 29 : 
        var acceptance$5 = param[0];
        return (function (state) {
            var partial_arg = $$Event.Payout[/* dataEq */2];
            var partial_arg$1 = state[/* payoutData */18];
            return (function (param) {
                return validateAcceptance(acceptance$5, partial_arg$1, partial_arg, state, param);
              });
          });
    case 30 : 
        return (function (_state, _pubKey) {
            return /* Ok */0;
          });
    case 31 : 
        var partial_arg$10 = param[0];
        return (function (param, param$1) {
            return validateDenial(partial_arg$10, param, param$1);
          });
    case 32 : 
        return (function (_state, _pubKey) {
            return /* Ok */0;
          });
    case 33 : 
        return (function (_state, _pubKey) {
            return /* Ok */0;
          });
    case 34 : 
        return (function (_state, _pubKey) {
            return /* Ok */0;
          });
    case 35 : 
        return (function (_state, _pubKey) {
            return /* Ignore */1;
          });
    case 36 : 
        return (function (_state, _pubKey) {
            return /* Ok */0;
          });
    case 37 : 
        var partial_arg$11 = param[0];
        return (function (param, param$1) {
            return validateCustodianKeyChainUpdated(partial_arg$11, param, param$1);
          });
    case 38 : 
        var partial_arg$12 = param[0];
        return (function (param, param$1) {
            return validateAccountKeyChainIdentified(partial_arg$12, param, param$1);
          });
    case 39 : 
        var partial_arg$13 = param[0];
        return (function (param, param$1) {
            return validateAccountKeyChainActivated(partial_arg$13, param, param$1);
          });
    case 40 : 
        var partial_arg$14 = param[0];
        return (function (param, param$1) {
            return validateIncomeAddressExposed(partial_arg$14, param, param$1);
          });
    case 41 : 
        return (function (_state, _pubKey) {
            return /* Ok */0;
          });
    case 42 : 
        return (function (_state, _pubKey) {
            return /* Ok */0;
          });
    case 43 : 
        return (function (_state, _pubKey) {
            return /* Ok */0;
          });
    default:
      var partial_arg$15 = param[0];
      return (function (param, param$1) {
          return validateEndorsement(partial_arg$15, param, param$1);
        });
  }
}

function validate(originId, state, param) {
  var issuerPubKey = param[/* issuerPubKey */2];
  var $$event = param[/* event */0];
  if (Belt_SetString.has(state[/* knownItems */6], param[/* hash */1])) {
    return /* Ignore */1;
  } else {
    var match = $$Event.isSystemEvent($$event);
    var match$1 = List.mem_assoc(issuerPubKey, state[/* currentPartnerPubKeys */8]);
    var exit = 0;
    var exit$1 = 0;
    switch ($$event.tag | 0) {
      case 0 : 
          var match$2 = PrimitiveTypes.UserId[/* eq */5](state[/* creatorData */19][/* id */1], PrimitiveTypes.UserId[/* fromString */1](""));
          if (match$2) {
            return /* Ok */0;
          } else {
            return /* BadData */["Venture is already created"];
          }
      case 1 : 
          if (match) {
            exit$1 = 3;
          } else if (match$1) {
            exit = 2;
          } else if (Caml_obj.caml_equal($$event[0][/* data */6], state[/* creatorData */19]) && Caml_obj.caml_equal(issuerPubKey, state[/* creatorData */19][/* pubKey */2]) && List.length(state[/* partnerData */9]) === 0) {
            return /* Ok */0;
          } else {
            exit$1 = 3;
          }
          break;
      case 3 : 
          if (match) {
            exit$1 = 3;
          } else if (match$1) {
            exit = 2;
          } else if (Caml_obj.caml_equal($$event[0][/* supporterId */1], state[/* creatorData */19][/* id */1]) && Belt_SetString.size(state[/* knownItems */6]) === 2) {
            return /* Ok */0;
          } else {
            exit$1 = 3;
          }
          break;
      case 6 : 
          if (match$1) {
            return /* BadData */["Partner pub key is already known"];
          } else if (originId !== undefined) {
            var originId$1 = Caml_option.valFromOption(originId);
            var match$3 = Belt_Set.has(state[/* currentPartners */7], originId$1) && PrimitiveTypes.UserId[/* eq */5](originId$1, $$event[0][/* partnerId */0]);
            if (match$3) {
              return /* Ok */0;
            } else {
              return /* InvalidIssuer */2;
            }
          } else {
            return /* InvalidIssuer */2;
          }
      default:
        exit$1 = 3;
    }
    if (exit$1 === 3) {
      if (match) {
        if (issuerPubKey !== state[/* systemPubKey */5]) {
          return /* InvalidIssuer */2;
        } else if ($$event.tag === 4 && !(match$1 || !(Caml_obj.caml_equal($$event[0][/* data */2], state[/* creatorData */19]) && List.length(state[/* partnerData */9]) === 1))) {
          return /* Ok */0;
        } else {
          exit = 1;
        }
      } else if (match$1) {
        exit = 2;
      } else {
        return /* InvalidIssuer */2;
      }
    }
    switch (exit) {
      case 1 : 
          return Curry._2(validateEvent($$event), state, PrimitiveTypes.UserId[/* fromString */1]("system"));
      case 2 : 
          return Curry._2(validateEvent($$event), state, List.assoc(issuerPubKey, state[/* currentPartnerPubKeys */8]));
      
    }
  }
}

var ItemsSet = 0;

exports.ItemsSet = ItemsSet;
exports.make = make;
exports.apply = apply;
exports.resultToString = resultToString;
exports.processExists = processExists;
exports.isEligible = isEligible;
exports.hasYetToVote = hasYetToVote;
exports.policyFulfilled = policyFulfilled;
exports.policyCanNotBeFulfilled = policyCanNotBeFulfilled;
exports.ensureDependencies = ensureDependencies;
exports.accountExists = accountExists;
exports.isCustodian = isCustodian;
exports.custodianKeyChainsExist = custodianKeyChainsExist;
exports.accountKeyChainIdentified = accountKeyChainIdentified;
exports.activationSequenceInOrder = activationSequenceInOrder;
exports.test = test;
exports.andThen = andThen;
exports.returnResult = returnResult;
exports.defaultDataValidator = defaultDataValidator;
exports.validateProposal = validateProposal;
exports.validateRejection = validateRejection;
exports.validateEndorsement = validateEndorsement;
exports.validateAcceptance = validateAcceptance;
exports.validateDenial = validateDenial;
exports.validatePartnerData = validatePartnerData;
exports.validatePartnerRemovalData = validatePartnerRemovalData;
exports.validateCustodianData = validateCustodianData;
exports.validateCustodianRemovalData = validateCustodianRemovalData;
exports.validateAccountCreationData = validateAccountCreationData;
exports.validateCustodianKeyChainUpdated = validateCustodianKeyChainUpdated;
exports.validateAccountKeyChainIdentified = validateAccountKeyChainIdentified;
exports.validateAccountKeyChainActivated = validateAccountKeyChainActivated;
exports.validateIncomeAddressExposed = validateIncomeAddressExposed;
exports.validateEvent = validateEvent;
exports.validate = validate;
/* Event Not a pure module */

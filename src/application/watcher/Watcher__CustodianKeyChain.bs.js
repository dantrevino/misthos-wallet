// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Event = require("../events/Event.bs.js");
var Utils = require("../../utils/Utils.bs.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var EventLog = require("../events/EventLog.bs.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var WalletTypes = require("../wallet/WalletTypes.bs.js");
var Caml_oo_curry = require("bs-platform/lib/js/caml_oo_curry.js");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");
var PrimitiveTypes = require("../PrimitiveTypes.bs.js");
var CustodianKeyChain = require("../wallet/CustodianKeyChain.bs.js");

var class_tables = [
  0,
  0,
  0
];

function make(param, param$1, log) {
  var match = param$1[/* data */2];
  if (!class_tables[0]) {
    var $$class = CamlinternalOO.create_table([
          "processCompleted",
          "receive",
          "pendingEvent"
        ]);
    var env = CamlinternalOO.new_variable($$class, "");
    var ids = CamlinternalOO.new_methods_variables($$class, [
          "receive",
          "processCompleted",
          "pendingEvent"
        ], ["state"]);
    var receive = ids[0];
    var processCompleted = ids[1];
    var pendingEvent = ids[2];
    var state = ids[3];
    CamlinternalOO.set_methods($$class, /* array */[
          receive,
          (function (self$1, param) {
              var env$1 = self$1[env];
              var $$event = param[/* event */0];
              var tmp;
              switch ($$event.tag | 0) {
                case 0 : 
                    var init = self$1[state][0];
                    tmp = /* record */[
                      /* ventureId */$$event[0][/* ventureId */0],
                      /* pendingEvent */init[/* pendingEvent */1],
                      /* selfRemoved */init[/* selfRemoved */2],
                      /* pubKeyPresent */init[/* pubKeyPresent */3],
                      /* hardwareIdPresent */init[/* hardwareIdPresent */4],
                      /* nextKeyChainIdx */init[/* nextKeyChainIdx */5]
                    ];
                    break;
                case 1 : 
                    var match = $$event[0];
                    if (PrimitiveTypes.ProcessId[/* eq */5](match[/* processId */0], env$1[5])) {
                      var init$1 = self$1[state][0];
                      tmp = /* record */[
                        /* ventureId */init$1[/* ventureId */0],
                        /* pendingEvent */init$1[/* pendingEvent */1],
                        /* selfRemoved */init$1[/* selfRemoved */2],
                        /* pubKeyPresent */Js_option.isSome(match[/* data */6][/* pubKey */2]),
                        /* hardwareIdPresent */init$1[/* hardwareIdPresent */4],
                        /* nextKeyChainIdx */init$1[/* nextKeyChainIdx */5]
                      ];
                    } else {
                      tmp = self$1[state][0];
                    }
                    break;
                case 6 : 
                    if (PrimitiveTypes.UserId[/* eq */5]($$event[0][/* partnerId */0], env$1[0])) {
                      var init$2 = self$1[state][0];
                      tmp = /* record */[
                        /* ventureId */init$2[/* ventureId */0],
                        /* pendingEvent */init$2[/* pendingEvent */1],
                        /* selfRemoved */init$2[/* selfRemoved */2],
                        /* pubKeyPresent */true,
                        /* hardwareIdPresent */init$2[/* hardwareIdPresent */4],
                        /* nextKeyChainIdx */init$2[/* nextKeyChainIdx */5]
                      ];
                    } else {
                      tmp = self$1[state][0];
                    }
                    break;
                case 10 : 
                    var match$1 = $$event[0][/* data */2];
                    if (PrimitiveTypes.UserId[/* eq */5](env$1[1], match$1[/* id */0]) && PrimitiveTypes.ProcessId[/* eq */5](match$1[/* lastPartnerProcess */1], env$1[5])) {
                      var init$3 = self$1[state][0];
                      tmp = /* record */[
                        /* ventureId */init$3[/* ventureId */0],
                        /* pendingEvent */undefined,
                        /* selfRemoved */true,
                        /* pubKeyPresent */init$3[/* pubKeyPresent */3],
                        /* hardwareIdPresent */init$3[/* hardwareIdPresent */4],
                        /* nextKeyChainIdx */init$3[/* nextKeyChainIdx */5]
                      ];
                    } else {
                      var init$4 = self$1[state][0];
                      tmp = /* record */[
                        /* ventureId */init$4[/* ventureId */0],
                        /* pendingEvent */(function (param) {
                            return /* tuple */[
                                    env$1[2],
                                    /* CustodianKeyChainUpdated */Block.__(37, [$$Event.CustodianKeyChainUpdated[/* make */0](env$1[4], env$1[1], CustodianKeyChain.toPublicKeyChain(CustodianKeyChain.make(self$1[state][0][/* ventureId */0], env$1[6], self$1[state][0][/* nextKeyChainIdx */5], env$1[3])))])
                                  ];
                          }),
                        /* selfRemoved */init$4[/* selfRemoved */2],
                        /* pubKeyPresent */init$4[/* pubKeyPresent */3],
                        /* hardwareIdPresent */init$4[/* hardwareIdPresent */4],
                        /* nextKeyChainIdx */init$4[/* nextKeyChainIdx */5]
                      ];
                    }
                    break;
                case 15 : 
                    if (Caml_obj.caml_equal($$event[0][/* data */2][/* accountIdx */0], env$1[6])) {
                      var init$5 = self$1[state][0];
                      tmp = /* record */[
                        /* ventureId */init$5[/* ventureId */0],
                        /* pendingEvent */(function (param) {
                            return /* tuple */[
                                    env$1[2],
                                    /* CustodianKeyChainUpdated */Block.__(37, [$$Event.CustodianKeyChainUpdated[/* make */0](env$1[4], env$1[1], CustodianKeyChain.toPublicKeyChain(CustodianKeyChain.make(self$1[state][0][/* ventureId */0], env$1[6], self$1[state][0][/* nextKeyChainIdx */5], env$1[3])))])
                                  ];
                          }),
                        /* selfRemoved */init$5[/* selfRemoved */2],
                        /* pubKeyPresent */init$5[/* pubKeyPresent */3],
                        /* hardwareIdPresent */init$5[/* hardwareIdPresent */4],
                        /* nextKeyChainIdx */init$5[/* nextKeyChainIdx */5]
                      ];
                    } else {
                      tmp = self$1[state][0];
                    }
                    break;
                case 24 : 
                    var match$2 = $$event[0][/* data */2];
                    if (PrimitiveTypes.UserId[/* eq */5](match$2[/* custodianId */0], env$1[1]) && PrimitiveTypes.ProcessId[/* eq */5](match$2[/* lastCustodianProcess */2], env$1[4]) && WalletTypes.AccountIndex[/* eq */7](match$2[/* accountIdx */1], env$1[6])) {
                      var init$6 = self$1[state][0];
                      tmp = /* record */[
                        /* ventureId */init$6[/* ventureId */0],
                        /* pendingEvent */undefined,
                        /* selfRemoved */true,
                        /* pubKeyPresent */init$6[/* pubKeyPresent */3],
                        /* hardwareIdPresent */init$6[/* hardwareIdPresent */4],
                        /* nextKeyChainIdx */init$6[/* nextKeyChainIdx */5]
                      ];
                    } else {
                      tmp = self$1[state][0];
                    }
                    break;
                case 37 : 
                    var match$3 = $$event[0];
                    var keyChain = match$3[/* keyChain */2];
                    var custodian = match$3[/* custodianId */1];
                    if (PrimitiveTypes.UserId[/* eq */5](custodian, env$1[1]) && PrimitiveTypes.ProcessId[/* eq */5](env$1[4], match$3[/* custodianApprovalProcess */0]) && WalletTypes.AccountIndex[/* eq */7](CustodianKeyChain.accountIdx(keyChain), env$1[6])) {
                      var init$7 = self$1[state][0];
                      tmp = /* record */[
                        /* ventureId */init$7[/* ventureId */0],
                        /* pendingEvent */undefined,
                        /* selfRemoved */init$7[/* selfRemoved */2],
                        /* pubKeyPresent */init$7[/* pubKeyPresent */3],
                        /* hardwareIdPresent */Js_option.isSome(CustodianKeyChain.hardwareId(keyChain)),
                        /* nextKeyChainIdx */WalletTypes.CustodianKeyChainIndex[/* next */2](self$1[state][0][/* nextKeyChainIdx */5])
                      ];
                    } else if (PrimitiveTypes.UserId[/* eq */5](custodian, env$1[1]) && WalletTypes.AccountIndex[/* eq */7](CustodianKeyChain.accountIdx(keyChain), env$1[6])) {
                      var init$8 = self$1[state][0];
                      tmp = /* record */[
                        /* ventureId */init$8[/* ventureId */0],
                        /* pendingEvent */Utils.mapOption((function (param, param$1) {
                                return /* tuple */[
                                        env$1[2],
                                        /* CustodianKeyChainUpdated */Block.__(37, [$$Event.CustodianKeyChainUpdated[/* make */0](env$1[4], env$1[1], CustodianKeyChain.toPublicKeyChain(CustodianKeyChain.make(self$1[state][0][/* ventureId */0], env$1[6], WalletTypes.CustodianKeyChainIndex[/* next */2](self$1[state][0][/* nextKeyChainIdx */5]), env$1[3])))])
                                      ];
                              }), self$1[state][0][/* pendingEvent */1]),
                        /* selfRemoved */init$8[/* selfRemoved */2],
                        /* pubKeyPresent */init$8[/* pubKeyPresent */3],
                        /* hardwareIdPresent */Js_option.isSome(CustodianKeyChain.hardwareId(keyChain)),
                        /* nextKeyChainIdx */WalletTypes.CustodianKeyChainIndex[/* next */2](self$1[state][0][/* nextKeyChainIdx */5])
                      ];
                    } else {
                      tmp = self$1[state][0];
                    }
                    break;
                default:
                  tmp = self$1[state][0];
              }
              self$1[state][0] = tmp;
              return /* () */0;
            }),
          processCompleted,
          (function (self$1, param) {
              var env$1 = self$1[env];
              if (PrimitiveTypes.UserId[/* neq */6](env$1[0], env$1[1])) {
                return true;
              } else {
                return self$1[state][0][/* selfRemoved */2];
              }
            }),
          pendingEvent,
          (function (self$1, param) {
              var match = !self$1[state][0][/* hardwareIdPresent */4] && self$1[state][0][/* pubKeyPresent */3];
              if (match) {
                return Utils.mapOption((function (f) {
                              return Curry._1(f, /* () */0);
                            }), self$1[state][0][/* pendingEvent */1]);
              }
              
            })
        ]);
    var env_init = function (env$1) {
      var self = CamlinternalOO.create_object_opt(0, $$class);
      self[state] = /* record */[/* contents : record */[
          /* ventureId */PrimitiveTypes.VentureId[/* fromString */1](""),
          /* pendingEvent */undefined,
          /* selfRemoved */false,
          /* pubKeyPresent */false,
          /* hardwareIdPresent */false,
          /* nextKeyChainIdx */WalletTypes.CustodianKeyChainIndex[/* first */10]
        ]];
      self[env] = env$1;
      return self;
    };
    CamlinternalOO.init_class($$class);
    class_tables[0] = env_init;
  }
  var envs_000 = param[/* userId */0];
  var envs_001 = match[/* partnerId */0];
  var envs_002 = param[/* issuerKeyPair */2];
  var envs_003 = param[/* masterKeyChain */4];
  var envs_004 = param$1[/* processId */0];
  var envs_005 = match[/* partnerApprovalProcess */1];
  var envs_006 = match[/* accountIdx */3];
  var envs = [
    envs_000,
    envs_001,
    envs_002,
    envs_003,
    envs_004,
    envs_005,
    envs_006
  ];
  var $$process = Curry._1(class_tables[0], envs);
  if (Caml_oo_curry.js2(111581468, 1, $$process, /* () */0) === false) {
    Curry._3(EventLog.reduce, (function (param, item) {
            return Caml_oo_curry.js2(710435299, 2, $$process, item);
          }), /* () */0, log);
  }
  return $$process;
}

exports.make = make;
/* Event Not a pure module */

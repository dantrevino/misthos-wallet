// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Belt_Set = require("bs-platform/lib/js/belt_Set.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

function fulfilled(eligible, endorsed) {
  var endorsed$1 = Belt_Set.intersect(eligible, endorsed);
  if (Belt_Set.size(endorsed$1) >= Belt_Set.size(eligible)) {
    return Belt_Set.size(eligible) > 0;
  } else {
    return false;
  }
}

function canBeFulfilled(eligible, rejected) {
  var releventRejections = Belt_Set.intersect(eligible, rejected);
  return Belt_Set.size(releventRejections) === 0;
}

function encode(_p) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "type",
                "Unanimous"
              ],
              /* [] */0
            ]);
}

var Unanimous = /* module */[
  /* fulfilled */fulfilled,
  /* canBeFulfilled */canBeFulfilled,
  /* encode */encode
];

function fulfilled$1(param, eligible, endorsed) {
  var endorsed$1 = Belt_Set.intersect(eligible, endorsed);
  var nEndorsed = Belt_Set.size(endorsed$1);
  if (nEndorsed >= 1 && nEndorsed >= (Belt_Set.size(eligible) - param[/* n */0] | 0)) {
    return Belt_Set.size(eligible) > 0;
  } else {
    return false;
  }
}

function canBeFulfilled$1(param, eligible, rejected) {
  var releventRejections = Belt_Set.intersect(eligible, rejected);
  return Belt_Set.size(releventRejections) <= param[/* n */0];
}

function encode$1(param) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "type",
                "UnanimousMinusN"
              ],
              /* :: */[
                /* tuple */[
                  "n",
                  param[/* n */0]
                ],
                /* [] */0
              ]
            ]);
}

function decode(raw) {
  return /* record */[/* n */Json_decode.field("n", Json_decode.$$int, raw)];
}

var UnanimousMinusN = /* module */[
  /* fulfilled */fulfilled$1,
  /* canBeFulfilled */canBeFulfilled$1,
  /* encode */encode$1,
  /* decode */decode
];

var partial_arg = /* record */[/* n */1];

function fulfilled$2(param, param$1) {
  return fulfilled$1(partial_arg, param, param$1);
}

var partial_arg$1 = /* record */[/* n */1];

function canBeFulfilled$2(param, param$1) {
  return canBeFulfilled$1(partial_arg$1, param, param$1);
}

function encode$2(_p) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "type",
                "UnanimousMinusOne"
              ],
              /* [] */0
            ]);
}

var UnanimousMinusOne = /* module */[
  /* fulfilled */fulfilled$2,
  /* canBeFulfilled */canBeFulfilled$2,
  /* encode */encode$2
];

function fulfilled$3(param, eligible, endorsed) {
  var endorsed$1 = Belt_Set.intersect(eligible, endorsed);
  var nEndorsed = Belt_Set.size(endorsed$1);
  if (nEndorsed >= 1 && nEndorsed >= param[/* n */0] && Belt_Set.size(eligible) > 0) {
    return true;
  } else {
    return fulfilled(eligible, endorsed$1);
  }
}

function canBeFulfilled$3(param, eligible, rejected) {
  var releventRejections = Belt_Set.intersect(eligible, rejected);
  if ((Belt_Set.size(eligible) - Belt_Set.size(releventRejections) | 0) >= param[/* n */0]) {
    return true;
  } else {
    return Belt_Set.size(releventRejections) === 0;
  }
}

function encode$3(param) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "type",
                "AtLeast"
              ],
              /* :: */[
                /* tuple */[
                  "n",
                  param[/* n */0]
                ],
                /* [] */0
              ]
            ]);
}

function decode$1(raw) {
  return /* record */[/* n */Json_decode.field("n", Json_decode.$$int, raw)];
}

var AtLeast = /* module */[
  /* fulfilled */fulfilled$3,
  /* canBeFulfilled */canBeFulfilled$3,
  /* encode */encode$3,
  /* decode */decode$1
];

function fulfilled$4(param, eligible, endorsed) {
  var endorsed$1 = Belt_Set.intersect(eligible, endorsed);
  var eligibleSize = Belt_Set.size(eligible);
  if (eligibleSize > 0 && Belt_Set.size(endorsed$1) >= eligibleSize * (param[/* percentage */0] / 100)) {
    return true;
  } else {
    return fulfilled(eligible, endorsed$1);
  }
}

function canBeFulfilled$4(param, eligible, rejected) {
  var releventRejections = Belt_Set.intersect(eligible, rejected);
  return Belt_Set.size(releventRejections) <= Belt_Set.size(eligible) * ((100 - param[/* percentage */0] | 0) / 100);
}

function encode$4(param) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "type",
                "Percentage"
              ],
              /* :: */[
                /* tuple */[
                  "percentage",
                  param[/* percentage */0]
                ],
                /* [] */0
              ]
            ]);
}

function decode$2(raw) {
  return /* record */[/* percentage */Json_decode.field("percentage", Json_decode.$$int, raw)];
}

var Percentage = /* module */[
  /* fulfilled */fulfilled$4,
  /* canBeFulfilled */canBeFulfilled$4,
  /* encode */encode$4,
  /* decode */decode$2
];

function percentage(percentage$1) {
  return /* Percentage */Block.__(0, [/* record */[/* percentage */percentage$1]]);
}

function atLeast(n) {
  return /* AtLeast */Block.__(1, [/* record */[/* n */n]]);
}

function fulfilled$5(param) {
  if (typeof param === "number") {
    if (param === 0) {
      return fulfilled;
    } else {
      return fulfilled$2;
    }
  } else if (param.tag) {
    var partial_arg = param[0];
    return (function (param, param$1) {
        return fulfilled$3(partial_arg, param, param$1);
      });
  } else {
    var partial_arg$1 = param[0];
    return (function (param, param$1) {
        return fulfilled$4(partial_arg$1, param, param$1);
      });
  }
}

function canBeFulfilled$5(param) {
  if (typeof param === "number") {
    if (param === 0) {
      return canBeFulfilled;
    } else {
      return canBeFulfilled$2;
    }
  } else if (param.tag) {
    var partial_arg = param[0];
    return (function (param, param$1) {
        return canBeFulfilled$3(partial_arg, param, param$1);
      });
  } else {
    var partial_arg$1 = param[0];
    return (function (param, param$1) {
        return canBeFulfilled$4(partial_arg$1, param, param$1);
      });
  }
}

var eq = Caml_obj.caml_equal;

var neq = Caml_obj.caml_notequal;

function encode$5(policy) {
  if (typeof policy === "number") {
    if (policy === 0) {
      return encode(policy);
    } else {
      return encode$2(policy);
    }
  } else if (policy.tag) {
    return encode$3(policy[0]);
  } else {
    return encode$4(policy[0]);
  }
}

var UnknownPolicy = Caml_exceptions.create("Policy.UnknownPolicy");

function decode$3(raw) {
  var type_ = Json_decode.field("type", Json_decode.string, raw);
  switch (type_) {
    case "AtLeast" : 
        return /* AtLeast */Block.__(1, [decode$1(raw)]);
    case "Percentage" : 
        return /* Percentage */Block.__(0, [decode$2(raw)]);
    case "Unanimous" : 
        return /* Unanimous */0;
    case "UnanimousMinusOne" : 
        return /* UnanimousMinusOne */1;
    default:
      throw [
            UnknownPolicy,
            raw
          ];
  }
}

var defaultInitialPolicies = /* record */[
  /* addPartner : Unanimous */0,
  /* addCustodian : Unanimous */0,
  /* removePartner : UnanimousMinusOne */1,
  /* removeCustodian : UnanimousMinusOne */1,
  /* payout : Unanimous */0
];

function encodeInitialPolicies(policies) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "addPartner",
                encode$5(policies[/* addPartner */0])
              ],
              /* :: */[
                /* tuple */[
                  "addCustodian",
                  encode$5(policies[/* addCustodian */1])
                ],
                /* :: */[
                  /* tuple */[
                    "removePartner",
                    encode$5(policies[/* removePartner */2])
                  ],
                  /* :: */[
                    /* tuple */[
                      "removeCustodian",
                      encode$5(policies[/* removeCustodian */3])
                    ],
                    /* :: */[
                      /* tuple */[
                        "payout",
                        encode$5(policies[/* payout */4])
                      ],
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]);
}

function decodeInitialPolicies(raw) {
  return /* record */[
          /* addPartner */Json_decode.field("addPartner", decode$3, raw),
          /* addCustodian */Json_decode.field("addCustodian", decode$3, raw),
          /* removePartner */Json_decode.field("removePartner", decode$3, raw),
          /* removeCustodian */Json_decode.field("removeCustodian", decode$3, raw),
          /* payout */Json_decode.field("payout", decode$3, raw)
        ];
}

var unanimous = /* Unanimous */0;

var unanimousMinusOne = /* UnanimousMinusOne */1;

var defaultMetaPolicy = /* Unanimous */0;

var defaultAddPartner = /* Unanimous */0;

var defaultAddCustodian = /* Unanimous */0;

var defaultRemovePartner = /* UnanimousMinusOne */1;

var defaultRemoveCustodian = /* UnanimousMinusOne */1;

var defaultPayout = /* Unanimous */0;

exports.Unanimous = Unanimous;
exports.UnanimousMinusN = UnanimousMinusN;
exports.UnanimousMinusOne = UnanimousMinusOne;
exports.AtLeast = AtLeast;
exports.Percentage = Percentage;
exports.unanimous = unanimous;
exports.unanimousMinusOne = unanimousMinusOne;
exports.percentage = percentage;
exports.atLeast = atLeast;
exports.fulfilled = fulfilled$5;
exports.canBeFulfilled = canBeFulfilled$5;
exports.eq = eq;
exports.neq = neq;
exports.encode = encode$5;
exports.UnknownPolicy = UnknownPolicy;
exports.decode = decode$3;
exports.defaultMetaPolicy = defaultMetaPolicy;
exports.defaultAddPartner = defaultAddPartner;
exports.defaultAddCustodian = defaultAddCustodian;
exports.defaultRemovePartner = defaultRemovePartner;
exports.defaultRemoveCustodian = defaultRemoveCustodian;
exports.defaultPayout = defaultPayout;
exports.defaultInitialPolicies = defaultInitialPolicies;
exports.encodeInitialPolicies = encodeInitialPolicies;
exports.decodeInitialPolicies = decodeInitialPolicies;
/* No side effect */

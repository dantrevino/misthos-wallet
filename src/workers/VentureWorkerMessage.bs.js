// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Event = require("../application/events/Event.bs.js");
var Policy = require("../application/Policy.bs.js");
var Venture = require("../application/Venture.bs.js");
var EventLog = require("../application/events/EventLog.bs.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var WalletTypes = require("../application/wallet/WalletTypes.bs.js");
var PrimitiveTypes = require("../application/PrimitiveTypes.bs.js");
var AccountSettings = require("../application/wallet/AccountSettings.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var CustodianKeyChain = require("../application/wallet/CustodianKeyChain.bs.js");
var PayoutTransaction = require("../application/wallet/PayoutTransaction.bs.js");
var WorkerLocalStorage = require("./WorkerLocalStorage.bs.js");

var UnknownMessage = Caml_exceptions.create("VentureWorkerMessage.UnknownMessage");

function encodeSuccess(param) {
  if (typeof param === "number") {
    if (param === 0) {
      return Json_encode.object_(/* :: */[
                  /* tuple */[
                    "type",
                    "KeyChainSubmitted"
                  ],
                  /* [] */0
                ]);
    } else {
      return Json_encode.object_(/* :: */[
                  /* tuple */[
                    "type",
                    "TransactionSigned"
                  ],
                  /* [] */0
                ]);
    }
  } else {
    switch (param.tag | 0) {
      case 0 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "ProcessStarted"
                      ],
                      /* :: */[
                        /* tuple */[
                          "processId",
                          PrimitiveTypes.ProcessId[/* encode */2](param[0])
                        ],
                        /* [] */0
                      ]
                    ]);
      case 1 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "ProcessEndorsed"
                      ],
                      /* :: */[
                        /* tuple */[
                          "processId",
                          PrimitiveTypes.ProcessId[/* encode */2](param[0])
                        ],
                        /* [] */0
                      ]
                    ]);
      case 2 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "ProcessRejected"
                      ],
                      /* :: */[
                        /* tuple */[
                          "processId",
                          PrimitiveTypes.ProcessId[/* encode */2](param[0])
                        ],
                        /* [] */0
                      ]
                    ]);
      
    }
  }
}

function decodeSuccess(raw) {
  var type_ = Json_decode.field("type", Json_decode.string, raw);
  switch (type_) {
    case "KeyChainSubmitted" : 
        return /* KeyChainSubmitted */0;
    case "ProcessEndorsed" : 
        var processId = Json_decode.field("processId", PrimitiveTypes.ProcessId[/* decode */3], raw);
        return /* ProcessEndorsed */Block.__(1, [processId]);
    case "ProcessRejected" : 
        var processId$1 = Json_decode.field("processId", PrimitiveTypes.ProcessId[/* decode */3], raw);
        return /* ProcessRejected */Block.__(2, [processId$1]);
    case "ProcessStarted" : 
        var processId$2 = Json_decode.field("processId", PrimitiveTypes.ProcessId[/* decode */3], raw);
        return /* ProcessStarted */Block.__(0, [processId$2]);
    case "TransactionSigned" : 
        return /* TransactionSigned */1;
    default:
      throw [
            UnknownMessage,
            raw
          ];
  }
}

function encodeError(param) {
  switch (param) {
    case 0 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "NotACustodian"
                    ],
                    /* [] */0
                  ]);
    case 1 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "CouldNotJoinVenture"
                    ],
                    /* [] */0
                  ]);
    case 2 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "CouldNotLoadVenture"
                    ],
                    /* [] */0
                  ]);
    case 3 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "MaxPartnersReached"
                    ],
                    /* [] */0
                  ]);
    case 4 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "PartnerAlreadyExists"
                    ],
                    /* [] */0
                  ]);
    case 5 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "PartnerAlreadyProposed"
                    ],
                    /* [] */0
                  ]);
    case 6 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "UserIdDoesNotExist"
                    ],
                    /* [] */0
                  ]);
    case 7 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "CouldNotPersistVenture"
                    ],
                    /* [] */0
                  ]);
    
  }
}

function decodeError(raw) {
  var type_ = Json_decode.field("type", Json_decode.string, raw);
  switch (type_) {
    case "CouldNotJoinVenture" : 
        return /* CouldNotJoinVenture */1;
    case "CouldNotLoadVenture" : 
        return /* CouldNotLoadVenture */2;
    case "CouldNotPersistVenture" : 
        return /* CouldNotPersistVenture */7;
    case "MaxPartnersReached" : 
        return /* MaxPartnersReached */3;
    case "PartnerAlreadyExists" : 
        return /* PartnerAlreadyExists */4;
    case "PartnerAlreadyProposed" : 
        return /* PartnerAlreadyProposed */5;
    case "UserIdDoesNotExist" : 
        return /* UserIdDoesNotExist */6;
    default:
      throw [
            UnknownMessage,
            raw
          ];
  }
}

function encodeResponse(param) {
  if (param.tag) {
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "type",
                  "Error"
                ],
                /* :: */[
                  /* tuple */[
                    "cmdError",
                    encodeError(param[0])
                  ],
                  /* [] */0
                ]
              ]);
  } else {
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "type",
                  "Ok"
                ],
                /* :: */[
                  /* tuple */[
                    "cmdSuccess",
                    encodeSuccess(param[0])
                  ],
                  /* [] */0
                ]
              ]);
  }
}

function decodeResponse(raw) {
  var type_ = Json_decode.field("type", Json_decode.string, raw);
  switch (type_) {
    case "Error" : 
        return /* Error */Block.__(1, [Json_decode.field("cmdError", decodeError, raw)]);
    case "Ok" : 
        return /* Ok */Block.__(0, [Json_decode.field("cmdSuccess", decodeSuccess, raw)]);
    default:
      throw [
            UnknownMessage,
            raw
          ];
  }
}

function encodeIncoming(param) {
  switch (param.tag | 0) {
    case 0 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "UpdateSession"
                    ],
                    /* :: */[
                      /* tuple */[
                        "blockstackItems",
                        WorkerLocalStorage.encodeItems(param[0])
                      ],
                      /* [] */0
                    ]
                  ]);
    case 1 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "Create"
                    ],
                    /* :: */[
                      /* tuple */[
                        "name",
                        param[0]
                      ],
                      /* :: */[
                        /* tuple */[
                          "accountSettings",
                          AccountSettings.encode(param[1])
                        ],
                        /* :: */[
                          /* tuple */[
                            "initialPolicies",
                            Policy.encodeInitialPolicies(param[2])
                          ],
                          /* [] */0
                        ]
                      ]
                    ]
                  ]);
    case 2 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "Load"
                    ],
                    /* :: */[
                      /* tuple */[
                        "ventureId",
                        PrimitiveTypes.VentureId[/* encode */2](param[0])
                      ],
                      /* [] */0
                    ]
                  ]);
    case 3 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "JoinVia"
                    ],
                    /* :: */[
                      /* tuple */[
                        "ventureId",
                        PrimitiveTypes.VentureId[/* encode */2](param[0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "userId",
                          PrimitiveTypes.UserId[/* encode */2](param[1])
                        ],
                        /* [] */0
                      ]
                    ]
                  ]);
    case 4 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "ProposePartner"
                    ],
                    /* :: */[
                      /* tuple */[
                        "ventureId",
                        PrimitiveTypes.VentureId[/* encode */2](param[0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "userId",
                          PrimitiveTypes.UserId[/* encode */2](param[1])
                        ],
                        /* [] */0
                      ]
                    ]
                  ]);
    case 5 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "RejectPartner"
                    ],
                    /* :: */[
                      /* tuple */[
                        "ventureId",
                        PrimitiveTypes.VentureId[/* encode */2](param[0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "processId",
                          PrimitiveTypes.ProcessId[/* encode */2](param[1])
                        ],
                        /* [] */0
                      ]
                    ]
                  ]);
    case 6 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "EndorsePartner"
                    ],
                    /* :: */[
                      /* tuple */[
                        "ventureId",
                        PrimitiveTypes.VentureId[/* encode */2](param[0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "processId",
                          PrimitiveTypes.ProcessId[/* encode */2](param[1])
                        ],
                        /* [] */0
                      ]
                    ]
                  ]);
    case 7 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "ProposePartnerRemoval"
                    ],
                    /* :: */[
                      /* tuple */[
                        "ventureId",
                        PrimitiveTypes.VentureId[/* encode */2](param[0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "userId",
                          PrimitiveTypes.UserId[/* encode */2](param[1])
                        ],
                        /* [] */0
                      ]
                    ]
                  ]);
    case 8 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "RejectPartnerRemoval"
                    ],
                    /* :: */[
                      /* tuple */[
                        "ventureId",
                        PrimitiveTypes.VentureId[/* encode */2](param[0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "processId",
                          PrimitiveTypes.ProcessId[/* encode */2](param[1])
                        ],
                        /* [] */0
                      ]
                    ]
                  ]);
    case 9 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "EndorsePartnerRemoval"
                    ],
                    /* :: */[
                      /* tuple */[
                        "ventureId",
                        PrimitiveTypes.VentureId[/* encode */2](param[0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "processId",
                          PrimitiveTypes.ProcessId[/* encode */2](param[1])
                        ],
                        /* [] */0
                      ]
                    ]
                  ]);
    case 10 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "SubmitCustodianKeyChain"
                    ],
                    /* :: */[
                      /* tuple */[
                        "ventureId",
                        PrimitiveTypes.VentureId[/* encode */2](param[0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "keyChain",
                          CustodianKeyChain.encode(param[1])
                        ],
                        /* [] */0
                      ]
                    ]
                  ]);
    case 11 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "ProposePayout"
                    ],
                    /* :: */[
                      /* tuple */[
                        "ventureId",
                        PrimitiveTypes.VentureId[/* encode */2](param[0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "accountIdx",
                          WalletTypes.AccountIndex[/* encode */4](param[1])
                        ],
                        /* :: */[
                          /* tuple */[
                            "payoutTx",
                            PayoutTransaction.encode(param[2])
                          ],
                          /* :: */[
                            /* tuple */[
                              "signatures",
                              Json_encode.array((function (param) {
                                      return Json_encode.nullable((function (param) {
                                                    return Json_encode.pair((function (prim) {
                                                                  return prim;
                                                                }), (function (prim) {
                                                                  return prim;
                                                                }), param);
                                                  }), param);
                                    }), param[3])
                            ],
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]);
    case 12 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "RejectPayout"
                    ],
                    /* :: */[
                      /* tuple */[
                        "ventureId",
                        PrimitiveTypes.VentureId[/* encode */2](param[0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "processId",
                          PrimitiveTypes.ProcessId[/* encode */2](param[1])
                        ],
                        /* [] */0
                      ]
                    ]
                  ]);
    case 13 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "EndorsePayout"
                    ],
                    /* :: */[
                      /* tuple */[
                        "ventureId",
                        PrimitiveTypes.VentureId[/* encode */2](param[0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "signatures",
                          Json_encode.array((function (param) {
                                  return Json_encode.nullable((function (param) {
                                                return Json_encode.pair((function (prim) {
                                                              return prim;
                                                            }), (function (prim) {
                                                              return prim;
                                                            }), param);
                                              }), param);
                                }), param[1])
                        ],
                        /* :: */[
                          /* tuple */[
                            "processId",
                            PrimitiveTypes.ProcessId[/* encode */2](param[2])
                          ],
                          /* [] */0
                        ]
                      ]
                    ]
                  ]);
    case 14 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "SignPayout"
                    ],
                    /* :: */[
                      /* tuple */[
                        "ventureId",
                        PrimitiveTypes.VentureId[/* encode */2](param[0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "signatures",
                          Json_encode.array((function (param) {
                                  return Json_encode.nullable((function (param) {
                                                return Json_encode.pair((function (prim) {
                                                              return prim;
                                                            }), (function (prim) {
                                                              return prim;
                                                            }), param);
                                              }), param);
                                }), param[1])
                        ],
                        /* :: */[
                          /* tuple */[
                            "processId",
                            PrimitiveTypes.ProcessId[/* encode */2](param[2])
                          ],
                          /* [] */0
                        ]
                      ]
                    ]
                  ]);
    case 15 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "ExposeIncomeAddress"
                    ],
                    /* :: */[
                      /* tuple */[
                        "ventureId",
                        PrimitiveTypes.VentureId[/* encode */2](param[0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "accountIdx",
                          WalletTypes.AccountIndex[/* encode */4](param[1])
                        ],
                        /* [] */0
                      ]
                    ]
                  ]);
    case 16 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "NewItemsDetected"
                    ],
                    /* :: */[
                      /* tuple */[
                        "ventureId",
                        PrimitiveTypes.VentureId[/* encode */2](param[0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "items",
                          Json_encode.array(EventLog.encodeItem, param[1])
                        ],
                        /* :: */[
                          /* tuple */[
                            "partnerId",
                            PrimitiveTypes.UserId[/* encode */2](param[2])
                          ],
                          /* [] */0
                        ]
                      ]
                    ]
                  ]);
    case 17 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "SyncWallet"
                    ],
                    /* :: */[
                      /* tuple */[
                        "ventureId",
                        PrimitiveTypes.VentureId[/* encode */2](param[0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "broadcastEvents",
                          Json_encode.list($$Event.Payout[/* Broadcast */11][/* encode */1], param[1])
                        ],
                        /* :: */[
                          /* tuple */[
                            "broadcastFailures",
                            Json_encode.list($$Event.Payout[/* BroadcastFailed */13][/* encode */1], param[2])
                          ],
                          /* :: */[
                            /* tuple */[
                              "incomeEvents",
                              Json_encode.list($$Event.Income[/* Detected */1][/* encode */1], param[3])
                            ],
                            /* :: */[
                              /* tuple */[
                                "unlockEvents",
                                Json_encode.list($$Event.Income[/* Unlocked */2][/* encode */1], param[4])
                              ],
                              /* :: */[
                                /* tuple */[
                                  "transactionConfirmations",
                                  Json_encode.list($$Event.Transaction[/* Confirmed */0][/* encode */1], param[5])
                                ],
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]);
    case 18 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "SyncTabs"
                    ],
                    /* :: */[
                      /* tuple */[
                        "ventureId",
                        PrimitiveTypes.VentureId[/* encode */2](param[0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "items",
                          Json_encode.array(EventLog.encodeItem, param[1])
                        ],
                        /* [] */0
                      ]
                    ]
                  ]);
    
  }
}

function decodeIncoming(raw) {
  var type_ = Json_decode.field("type", Json_decode.string, raw);
  switch (type_) {
    case "Create" : 
        var name = Json_decode.field("name", Json_decode.string, raw);
        var accountSettings = Json_decode.field("accountSettings", AccountSettings.decode, raw);
        var initialPolicies = Json_decode.field("initialPolicies", Policy.decodeInitialPolicies, raw);
        return /* Create */Block.__(1, [
                  name,
                  accountSettings,
                  initialPolicies
                ]);
    case "EndorsePartner" : 
        var ventureId = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var processId = Json_decode.field("processId", PrimitiveTypes.ProcessId[/* decode */3], raw);
        return /* EndorsePartner */Block.__(6, [
                  ventureId,
                  processId
                ]);
    case "EndorsePartnerRemoval" : 
        var ventureId$1 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var processId$1 = Json_decode.field("processId", PrimitiveTypes.ProcessId[/* decode */3], raw);
        return /* EndorsePartnerRemoval */Block.__(9, [
                  ventureId$1,
                  processId$1
                ]);
    case "EndorsePayout" : 
        var ventureId$2 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var processId$2 = Json_decode.field("processId", PrimitiveTypes.ProcessId[/* decode */3], raw);
        var signatures = Json_decode.field("signatures", (function (param) {
                return Json_decode.array((function (param) {
                              return Json_decode.optional((function (param) {
                                            return Json_decode.pair(Json_decode.string, Json_decode.string, param);
                                          }), param);
                            }), param);
              }), raw);
        return /* EndorsePayout */Block.__(13, [
                  ventureId$2,
                  signatures,
                  processId$2
                ]);
    case "ExposeIncomeAddress" : 
        var ventureId$3 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var accountIdx = Json_decode.field("accountIdx", WalletTypes.AccountIndex[/* decode */5], raw);
        return /* ExposeIncomeAddress */Block.__(15, [
                  ventureId$3,
                  accountIdx
                ]);
    case "JoinVia" : 
        var ventureId$4 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var userId = Json_decode.field("userId", PrimitiveTypes.UserId[/* decode */3], raw);
        return /* JoinVia */Block.__(3, [
                  ventureId$4,
                  userId
                ]);
    case "Load" : 
        var ventureId$5 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        return /* Load */Block.__(2, [ventureId$5]);
    case "NewItemsDetected" : 
        var ventureId$6 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var items = Json_decode.field("items", (function (param) {
                return Json_decode.array(EventLog.decodeItem, param);
              }), raw);
        var partnerId = Json_decode.field("partnerId", PrimitiveTypes.UserId[/* decode */3], raw);
        return /* NewItemsDetected */Block.__(16, [
                  ventureId$6,
                  items,
                  partnerId
                ]);
    case "ProposePartner" : 
        var ventureId$7 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var userId$1 = Json_decode.field("userId", PrimitiveTypes.UserId[/* decode */3], raw);
        return /* ProposePartner */Block.__(4, [
                  ventureId$7,
                  userId$1
                ]);
    case "ProposePartnerRemoval" : 
        var ventureId$8 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var userId$2 = Json_decode.field("userId", PrimitiveTypes.UserId[/* decode */3], raw);
        return /* ProposePartnerRemoval */Block.__(7, [
                  ventureId$8,
                  userId$2
                ]);
    case "ProposePayout" : 
        var ventureId$9 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var accountIdx$1 = Json_decode.field("accountIdx", WalletTypes.AccountIndex[/* decode */5], raw);
        var payoutTx = Json_decode.field("payoutTx", PayoutTransaction.decode, raw);
        var signatures$1 = Json_decode.field("signatures", (function (param) {
                return Json_decode.array((function (param) {
                              return Json_decode.optional((function (param) {
                                            return Json_decode.pair(Json_decode.string, Json_decode.string, param);
                                          }), param);
                            }), param);
              }), raw);
        return /* ProposePayout */Block.__(11, [
                  ventureId$9,
                  accountIdx$1,
                  payoutTx,
                  signatures$1
                ]);
    case "RejectPartner" : 
        var ventureId$10 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var processId$3 = Json_decode.field("processId", PrimitiveTypes.ProcessId[/* decode */3], raw);
        return /* RejectPartner */Block.__(5, [
                  ventureId$10,
                  processId$3
                ]);
    case "RejectPartnerRemoval" : 
        var ventureId$11 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var processId$4 = Json_decode.field("processId", PrimitiveTypes.ProcessId[/* decode */3], raw);
        return /* RejectPartnerRemoval */Block.__(8, [
                  ventureId$11,
                  processId$4
                ]);
    case "RejectPayout" : 
        var ventureId$12 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var processId$5 = Json_decode.field("processId", PrimitiveTypes.ProcessId[/* decode */3], raw);
        return /* RejectPayout */Block.__(12, [
                  ventureId$12,
                  processId$5
                ]);
    case "SignPayout" : 
        var ventureId$13 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var processId$6 = Json_decode.field("processId", PrimitiveTypes.ProcessId[/* decode */3], raw);
        var signatures$2 = Json_decode.field("signatures", (function (param) {
                return Json_decode.array((function (param) {
                              return Json_decode.optional((function (param) {
                                            return Json_decode.pair(Json_decode.string, Json_decode.string, param);
                                          }), param);
                            }), param);
              }), raw);
        return /* SignPayout */Block.__(14, [
                  ventureId$13,
                  signatures$2,
                  processId$6
                ]);
    case "SubmitCustodianKeyChain" : 
        var ventureId$14 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var keyChain = Json_decode.field("keyChain", CustodianKeyChain.decode, raw);
        return /* SubmitCustodianKeyChain */Block.__(10, [
                  ventureId$14,
                  keyChain
                ]);
    case "SyncTabs" : 
        var ventureId$15 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var items$1 = Json_decode.field("items", (function (param) {
                return Json_decode.array(EventLog.decodeItem, param);
              }), raw);
        return /* SyncTabs */Block.__(18, [
                  ventureId$15,
                  items$1
                ]);
    case "SyncWallet" : 
        var ventureId$16 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var partial_arg = $$Event.Payout[/* Broadcast */11][/* decode */2];
        var broadcasts = Json_decode.field("broadcastEvents", (function (param) {
                return Json_decode.list(partial_arg, param);
              }), raw);
        var partial_arg$1 = $$Event.Payout[/* BroadcastFailed */13][/* decode */2];
        var broadcastFailures = Json_decode.field("broadcastFailures", (function (param) {
                return Json_decode.list(partial_arg$1, param);
              }), raw);
        var partial_arg$2 = $$Event.Income[/* Detected */1][/* decode */2];
        var incomeEvents = Json_decode.field("incomeEvents", (function (param) {
                return Json_decode.list(partial_arg$2, param);
              }), raw);
        var partial_arg$3 = $$Event.Income[/* Unlocked */2][/* decode */2];
        var unlockEvents = Json_decode.field("unlockEvents", (function (param) {
                return Json_decode.list(partial_arg$3, param);
              }), raw);
        var partial_arg$4 = $$Event.Transaction[/* Confirmed */0][/* decode */2];
        var confs = Json_decode.field("transactionConfirmations", (function (param) {
                return Json_decode.list(partial_arg$4, param);
              }), raw);
        return /* SyncWallet */Block.__(17, [
                  ventureId$16,
                  broadcasts,
                  broadcastFailures,
                  incomeEvents,
                  unlockEvents,
                  confs
                ]);
    case "UpdateSession" : 
        var blockstackItems = Json_decode.field("blockstackItems", WorkerLocalStorage.decodeItems, raw);
        return /* UpdateSession */Block.__(0, [blockstackItems]);
    default:
      throw [
            UnknownMessage,
            raw
          ];
  }
}

function encodeOutgoing(param) {
  if (typeof param === "number") {
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "type",
                  "SessionPending"
                ],
                /* [] */0
              ]);
  } else {
    switch (param.tag | 0) {
      case 0 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "SessionStarted"
                      ],
                      /* :: */[
                        /* tuple */[
                          "blockstackItems",
                          WorkerLocalStorage.encodeItems(param[0])
                        ],
                        /* :: */[
                          /* tuple */[
                            "storagePrefix",
                            param[1]
                          ],
                          /* [] */0
                        ]
                      ]
                    ]);
      case 1 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "NewIncomeAddress"
                      ],
                      /* :: */[
                        /* tuple */[
                          "ventureId",
                          PrimitiveTypes.VentureId[/* encode */2](param[0])
                        ],
                        /* :: */[
                          /* tuple */[
                            "address",
                            param[1]
                          ],
                          /* [] */0
                        ]
                      ]
                    ]);
      case 2 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "UpdateIndex"
                      ],
                      /* :: */[
                        /* tuple */[
                          "index",
                          Venture.Index[/* encode */1](param[0])
                        ],
                        /* [] */0
                      ]
                    ]);
      case 3 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "VentureLoaded"
                      ],
                      /* :: */[
                        /* tuple */[
                          "ventureId",
                          PrimitiveTypes.VentureId[/* encode */2](param[0])
                        ],
                        /* :: */[
                          /* tuple */[
                            "log",
                            Curry._1(EventLog.encode, param[1])
                          ],
                          /* :: */[
                            /* tuple */[
                              "newItems",
                              Json_encode.array(EventLog.encodeItem, param[2])
                            ],
                            /* [] */0
                          ]
                        ]
                      ]
                    ]);
      case 4 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "VentureCreated"
                      ],
                      /* :: */[
                        /* tuple */[
                          "ventureId",
                          PrimitiveTypes.VentureId[/* encode */2](param[0])
                        ],
                        /* :: */[
                          /* tuple */[
                            "log",
                            Curry._1(EventLog.encode, param[1])
                          ],
                          /* [] */0
                        ]
                      ]
                    ]);
      case 5 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "NewItems"
                      ],
                      /* :: */[
                        /* tuple */[
                          "ventureId",
                          PrimitiveTypes.VentureId[/* encode */2](param[0])
                        ],
                        /* :: */[
                          /* tuple */[
                            "items",
                            Json_encode.array(EventLog.encodeItem, param[1])
                          ],
                          /* [] */0
                        ]
                      ]
                    ]);
      case 6 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "CmdCompleted"
                      ],
                      /* :: */[
                        /* tuple */[
                          "ventureId",
                          PrimitiveTypes.VentureId[/* encode */2](param[0])
                        ],
                        /* :: */[
                          /* tuple */[
                            "correlationId",
                            param[1]
                          ],
                          /* :: */[
                            /* tuple */[
                              "response",
                              encodeResponse(param[2])
                            ],
                            /* [] */0
                          ]
                        ]
                      ]
                    ]);
      
    }
  }
}

function decodeOutgoing(raw) {
  var type_ = Json_decode.field("type", Json_decode.string, raw);
  switch (type_) {
    case "CmdCompleted" : 
        var ventureId = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var correlationId = Json_decode.field("correlationId", Json_decode.string, raw);
        var response = Json_decode.field("response", decodeResponse, raw);
        return /* CmdCompleted */Block.__(6, [
                  ventureId,
                  correlationId,
                  response
                ]);
    case "NewIncomeAddress" : 
        var ventureId$1 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var address = Json_decode.field("address", Json_decode.string, raw);
        return /* NewIncomeAddress */Block.__(1, [
                  ventureId$1,
                  address
                ]);
    case "NewItems" : 
        var ventureId$2 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var items = Json_decode.field("items", (function (param) {
                return Json_decode.array(EventLog.decodeItem, param);
              }), raw);
        return /* NewItems */Block.__(5, [
                  ventureId$2,
                  items
                ]);
    case "SessionPending" : 
        return /* SessionPending */0;
    case "SessionStarted" : 
        var blockstackItems = Json_decode.field("blockstackItems", WorkerLocalStorage.decodeItems, raw);
        var storagePrefix = Json_decode.field("storagePrefix", Json_decode.string, raw);
        return /* SessionStarted */Block.__(0, [
                  blockstackItems,
                  storagePrefix
                ]);
    case "UpdateIndex" : 
        return /* UpdateIndex */Block.__(2, [Json_decode.field("index", Venture.Index[/* decode */2], raw)]);
    case "VentureCreated" : 
        var ventureId$3 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var log = Json_decode.field("log", EventLog.decode, raw);
        return /* VentureCreated */Block.__(4, [
                  ventureId$3,
                  log
                ]);
    case "VentureLoaded" : 
        var ventureId$4 = Json_decode.field("ventureId", PrimitiveTypes.VentureId[/* decode */3], raw);
        var log$1 = Json_decode.field("log", EventLog.decode, raw);
        var newItems = Json_decode.field("newItems", (function (param) {
                return Json_decode.array(EventLog.decodeItem, param);
              }), raw);
        return /* VentureLoaded */Block.__(3, [
                  ventureId$4,
                  log$1,
                  newItems
                ]);
    default:
      throw [
            UnknownMessage,
            raw
          ];
  }
}

exports.UnknownMessage = UnknownMessage;
exports.encodeSuccess = encodeSuccess;
exports.decodeSuccess = decodeSuccess;
exports.encodeError = encodeError;
exports.decodeError = decodeError;
exports.encodeResponse = encodeResponse;
exports.decodeResponse = decodeResponse;
exports.encodeIncoming = encodeIncoming;
exports.decodeIncoming = decodeIncoming;
exports.encodeOutgoing = encodeOutgoing;
exports.decodeOutgoing = decodeOutgoing;
/* Event Not a pure module */

// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var $$Event = require("../../src/application/events/Event.bs.js");
var Generators = require("../helpers/Generators.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var WalletTypes = require("../../src/application/wallet/WalletTypes.bs.js");
var PrimitiveTypes = require("../../src/application/PrimitiveTypes.bs.js");
var ValidationHelpers = require("../helpers/ValidationHelpers.bs.js");
var Venture__Validation = require("../../src/application/Venture__Validation.bs.js");

Jest.describe("CustodianKeyChainUpdated", (function (param) {
        Jest.describe("when everything is fine", (function (param) {
                var match = Generators.twoUserSessions(/* () */0);
                var user1 = match[0];
                var log = Generators.Log[/* withCustodian */33](user1, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withAccount */27](user1, Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1))));
                return ValidationHelpers.testValidationResult(undefined, ValidationHelpers.constructState(undefined, log), Generators.Log[/* lastItem */4](Generators.Log[/* withCustodianKeyChain */38](undefined, undefined, undefined, user1, log)), /* Ok */0);
              }));
        Jest.describe("when the signer doesn't match the custodianId", (function (param) {
                var match = Generators.twoUserSessions(/* () */0);
                var user2 = match[1];
                var user1 = match[0];
                var log = Generators.Log[/* withPartner */17](undefined, user2, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withCustodian */33](user1, /* :: */[
                          user1,
                          /* [] */0
                        ], Generators.Log[/* withAccount */27](user1, Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1)))));
                return ValidationHelpers.testValidationResult(undefined, ValidationHelpers.constructState(undefined, log), Generators.Log[/* lastItem */4](Generators.Log[/* withCustodianKeyChain */38](undefined, undefined, user2, user1, log)), /* InvalidIssuer */2);
              }));
        Jest.describe("when the custodianApprovalProcess doesn't exist", (function (param) {
                var match = Generators.twoUserSessions(/* () */0);
                var user1 = match[0];
                var log = Generators.Log[/* withCustodian */33](user1, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withAccount */27](user1, Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1))));
                return ValidationHelpers.testDataValidation((function (param, param$1) {
                              return ValidationHelpers.withIssuer(user1, Venture__Validation.validateCustodianKeyChainUpdated, param, param$1);
                            }), ValidationHelpers.constructState(undefined, log), /* record */[
                            /* custodianApprovalProcess */PrimitiveTypes.ProcessId[/* make */10](/* () */0),
                            /* custodianId */user1[/* userId */0],
                            /* keyChain */Generators.custodianKeyChain(undefined, undefined, Generators.Log[/* ventureId */2](log), 0, user1)
                          ], /* BadData */["Bad custodianApprovalProcess"]);
              }));
        Jest.describe("when the custodianApprovalProcess isn't completed", (function (param) {
                var match = Generators.twoUserSessions(/* () */0);
                var user1 = match[0];
                var log = Generators.Log[/* withCustodianProposed */28](user1, user1, Generators.Log[/* withAccount */27](user1, Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1))));
                var proposal = $$Event.getCustodianProposedExn(Generators.Log[/* lastEvent */5](log));
                return ValidationHelpers.testDataValidation((function (param, param$1) {
                              return ValidationHelpers.withIssuer(user1, Venture__Validation.validateCustodianKeyChainUpdated, param, param$1);
                            }), ValidationHelpers.constructState(undefined, log), /* record */[
                            /* custodianApprovalProcess */proposal[/* processId */0],
                            /* custodianId */user1[/* userId */0],
                            /* keyChain */Generators.custodianKeyChain(undefined, undefined, Generators.Log[/* ventureId */2](log), 0, user1)
                          ], /* BadData */["Bad custodianApprovalProcess"]);
              }));
        Jest.describe("when the custodian approval process is for another user", (function (param) {
                var match = Generators.twoUserSessions(/* () */0);
                var user2 = match[1];
                var user1 = match[0];
                var log = Generators.Log[/* withCustodian */33](user1, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withAccount */27](user1, Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1))));
                var accepted = $$Event.getCustodianAcceptedExn(Generators.Log[/* lastEvent */5](log));
                var log$1 = Generators.Log[/* withPartner */17](undefined, user2, /* :: */[
                      user1,
                      /* [] */0
                    ], log);
                return ValidationHelpers.testDataValidation((function (param, param$1) {
                              return ValidationHelpers.withIssuer(user2, Venture__Validation.validateCustodianKeyChainUpdated, param, param$1);
                            }), ValidationHelpers.constructState(undefined, log$1), /* record */[
                            /* custodianApprovalProcess */accepted[/* processId */0],
                            /* custodianId */user2[/* userId */0],
                            /* keyChain */Generators.custodianKeyChain(undefined, undefined, Generators.Log[/* ventureId */2](log$1), 0, user1)
                          ], /* BadData */["CustodianApprovalProcess is for another partner"]);
              }));
        Jest.describe("when the account doesn't exist", (function (param) {
                var match = Generators.twoUserSessions(/* () */0);
                var user1 = match[0];
                var log = Generators.Log[/* withCustodian */33](user1, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withAccount */27](user1, Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1))));
                var accepted = $$Event.getCustodianAcceptedExn(Generators.Log[/* lastEvent */5](log));
                return ValidationHelpers.testDataValidation((function (param, param$1) {
                              return ValidationHelpers.withIssuer(user1, Venture__Validation.validateCustodianKeyChainUpdated, param, param$1);
                            }), ValidationHelpers.constructState(undefined, log), /* record */[
                            /* custodianApprovalProcess */accepted[/* processId */0],
                            /* custodianId */user1[/* userId */0],
                            /* keyChain */Generators.custodianKeyChain(undefined, Caml_option.some(WalletTypes.AccountIndex[/* fromInt */1](1)), Generators.Log[/* ventureId */2](log), 0, user1)
                          ], /* BadData */["Account doesn't exist"]);
              }));
        return Jest.describe("when the key chain index isn't in order", (function (param) {
                      var match = Generators.twoUserSessions(/* () */0);
                      var user1 = match[0];
                      var log = Generators.Log[/* withCustodian */33](user1, /* :: */[
                            user1,
                            /* [] */0
                          ], Generators.Log[/* withAccount */27](user1, Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1))));
                      var accepted = $$Event.getCustodianAcceptedExn(Generators.Log[/* lastEvent */5](log));
                      return ValidationHelpers.testDataValidation((function (param, param$1) {
                                    return ValidationHelpers.withIssuer(user1, Venture__Validation.validateCustodianKeyChainUpdated, param, param$1);
                                  }), ValidationHelpers.constructState(undefined, log), /* record */[
                                  /* custodianApprovalProcess */accepted[/* processId */0],
                                  /* custodianId */user1[/* userId */0],
                                  /* keyChain */Generators.custodianKeyChain(undefined, undefined, Generators.Log[/* ventureId */2](log), 1, user1)
                                ], /* BadData */["CustodianKeyChainIndex isn't in order"]);
                    }));
      }));

/*  Not a pure module */

// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Policy = require("../../src/application/Policy.bs.js");
var Belt_Set = require("bs-platform/lib/js/belt_Set.js");
var PrimitiveTypes = require("../../src/application/PrimitiveTypes.bs.js");

Jest.describe("Unanimous", (function (param) {
        Jest.test("fulfilled", (function (param) {
                var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                      PrimitiveTypes.UserId[/* fromString */1]("a"),
                      PrimitiveTypes.UserId[/* fromString */1]("b")
                    ]);
                var arg$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                      PrimitiveTypes.UserId[/* fromString */1]("a"),
                      PrimitiveTypes.UserId[/* fromString */1]("b")
                    ]);
                return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0]((function (param) {
                                    return Curry._2(Policy.fulfilled(param), arg, arg$1);
                                  })(Policy.unanimous)));
              }));
        Jest.test("not fulfilled", (function (param) {
                var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                      PrimitiveTypes.UserId[/* fromString */1]("a"),
                      PrimitiveTypes.UserId[/* fromString */1]("b")
                    ]);
                var arg$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                      PrimitiveTypes.UserId[/* fromString */1]("a"),
                      PrimitiveTypes.UserId[/* fromString */1]("c")
                    ]);
                return Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0]((function (param) {
                                    return Curry._2(Policy.fulfilled(param), arg, arg$1);
                                  })(Policy.unanimous)));
              }));
        Jest.test("at least one eligible", (function (param) {
                var arg = PrimitiveTypes.UserId[/* emptySet */9];
                var arg$1 = PrimitiveTypes.UserId[/* emptySet */9];
                return Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0]((function (param) {
                                    return Curry._2(Policy.fulfilled(param), arg, arg$1);
                                  })(Policy.unanimous)));
              }));
        return Jest.describe("canBeFullfilled", (function (param) {
                      Jest.test("with one rejection", (function (param) {
                              var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                                    PrimitiveTypes.UserId[/* fromString */1]("a"),
                                    PrimitiveTypes.UserId[/* fromString */1]("b")
                                  ]);
                              var arg$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                                    PrimitiveTypes.UserId[/* fromString */1]("a"),
                                    PrimitiveTypes.UserId[/* fromString */1]("c")
                                  ]);
                              return Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0]((function (param) {
                                                  return Curry._2(Policy.canBeFulfilled(param), arg, arg$1);
                                                })(Policy.unanimous)));
                            }));
                      return Jest.test("with zero rejections", (function (param) {
                                    var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                                          PrimitiveTypes.UserId[/* fromString */1]("a"),
                                          PrimitiveTypes.UserId[/* fromString */1]("b")
                                        ]);
                                    var arg$1 = PrimitiveTypes.UserId[/* emptySet */9];
                                    return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0]((function (param) {
                                                        return Curry._2(Policy.canBeFulfilled(param), arg, arg$1);
                                                      })(Policy.unanimous)));
                                  }));
                    }));
      }));

Jest.describe("UnanimousMinusOne", (function (param) {
        Jest.test("fulfilled", (function (param) {
                var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                      PrimitiveTypes.UserId[/* fromString */1]("a"),
                      PrimitiveTypes.UserId[/* fromString */1]("b")
                    ]);
                var arg$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                      PrimitiveTypes.UserId[/* fromString */1]("a"),
                      PrimitiveTypes.UserId[/* fromString */1]("b")
                    ]);
                return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0]((function (param) {
                                    return Curry._2(Policy.fulfilled(param), arg, arg$1);
                                  })(Policy.unanimousMinusOne)));
              }));
        Jest.test("fullfilled with minus 1 votes", (function (param) {
                var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                      PrimitiveTypes.UserId[/* fromString */1]("a"),
                      PrimitiveTypes.UserId[/* fromString */1]("b")
                    ]);
                var arg$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                      PrimitiveTypes.UserId[/* fromString */1]("a"),
                      PrimitiveTypes.UserId[/* fromString */1]("c")
                    ]);
                return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0]((function (param) {
                                    return Curry._2(Policy.fulfilled(param), arg, arg$1);
                                  })(Policy.unanimousMinusOne)));
              }));
        Jest.test("not fullfilled", (function (param) {
                var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                      PrimitiveTypes.UserId[/* fromString */1]("a"),
                      PrimitiveTypes.UserId[/* fromString */1]("b"),
                      PrimitiveTypes.UserId[/* fromString */1]("c")
                    ]);
                var arg$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[PrimitiveTypes.UserId[/* fromString */1]("a")]);
                return Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0]((function (param) {
                                    return Curry._2(Policy.fulfilled(param), arg, arg$1);
                                  })(Policy.unanimousMinusOne)));
              }));
        Jest.test("at least one eligible", (function (param) {
                var arg = PrimitiveTypes.UserId[/* emptySet */9];
                var arg$1 = PrimitiveTypes.UserId[/* emptySet */9];
                return Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0]((function (param) {
                                    return Curry._2(Policy.fulfilled(param), arg, arg$1);
                                  })(Policy.unanimousMinusOne)));
              }));
        return Jest.describe("canBeFullfilled", (function (param) {
                      Jest.test("with two rejections", (function (param) {
                              var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                                    PrimitiveTypes.UserId[/* fromString */1]("a"),
                                    PrimitiveTypes.UserId[/* fromString */1]("b"),
                                    PrimitiveTypes.UserId[/* fromString */1]("c")
                                  ]);
                              var arg$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                                    PrimitiveTypes.UserId[/* fromString */1]("a"),
                                    PrimitiveTypes.UserId[/* fromString */1]("b")
                                  ]);
                              return Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0]((function (param) {
                                                  return Curry._2(Policy.canBeFulfilled(param), arg, arg$1);
                                                })(Policy.unanimousMinusOne)));
                            }));
                      Jest.test("with one rejection", (function (param) {
                              var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                                    PrimitiveTypes.UserId[/* fromString */1]("a"),
                                    PrimitiveTypes.UserId[/* fromString */1]("b")
                                  ]);
                              var arg$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[PrimitiveTypes.UserId[/* fromString */1]("a")]);
                              return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0]((function (param) {
                                                  return Curry._2(Policy.canBeFulfilled(param), arg, arg$1);
                                                })(Policy.unanimousMinusOne)));
                            }));
                      return Jest.test("with zero rejections", (function (param) {
                                    var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                                          PrimitiveTypes.UserId[/* fromString */1]("a"),
                                          PrimitiveTypes.UserId[/* fromString */1]("b")
                                        ]);
                                    var arg$1 = PrimitiveTypes.UserId[/* emptySet */9];
                                    return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0]((function (param) {
                                                        return Curry._2(Policy.canBeFulfilled(param), arg, arg$1);
                                                      })(Policy.unanimous)));
                                  }));
                    }));
      }));

Jest.describe("Percentage", (function (param) {
        var p = Policy.percentage(51);
        Jest.test("fulfilled", (function (param) {
                var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                      PrimitiveTypes.UserId[/* fromString */1]("a"),
                      PrimitiveTypes.UserId[/* fromString */1]("b"),
                      PrimitiveTypes.UserId[/* fromString */1]("c")
                    ]);
                var arg$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                      PrimitiveTypes.UserId[/* fromString */1]("a"),
                      PrimitiveTypes.UserId[/* fromString */1]("b")
                    ]);
                return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0]((function (param) {
                                    return Curry._2(Policy.fulfilled(param), arg, arg$1);
                                  })(p)));
              }));
        Jest.test("not fulfilled", (function (param) {
                var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                      PrimitiveTypes.UserId[/* fromString */1]("a"),
                      PrimitiveTypes.UserId[/* fromString */1]("b"),
                      PrimitiveTypes.UserId[/* fromString */1]("c"),
                      PrimitiveTypes.UserId[/* fromString */1]("d")
                    ]);
                var arg$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                      PrimitiveTypes.UserId[/* fromString */1]("a"),
                      PrimitiveTypes.UserId[/* fromString */1]("b")
                    ]);
                return Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0]((function (param) {
                                    return Curry._2(Policy.fulfilled(param), arg, arg$1);
                                  })(p)));
              }));
        Jest.test("at least one eligible", (function (param) {
                var arg = PrimitiveTypes.UserId[/* emptySet */9];
                var arg$1 = PrimitiveTypes.UserId[/* emptySet */9];
                return Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0]((function (param) {
                                    return Curry._2(Policy.fulfilled(param), arg, arg$1);
                                  })(p)));
              }));
        return Jest.describe("canBeFullfilled", (function (param) {
                      Jest.test("with one rejection and 2 eligible", (function (param) {
                              var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                                    PrimitiveTypes.UserId[/* fromString */1]("a"),
                                    PrimitiveTypes.UserId[/* fromString */1]("b")
                                  ]);
                              var arg$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[PrimitiveTypes.UserId[/* fromString */1]("a")]);
                              return Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0]((function (param) {
                                                  return Curry._2(Policy.canBeFulfilled(param), arg, arg$1);
                                                })(p)));
                            }));
                      return Jest.test("with one rejection and 3 eligible", (function (param) {
                                    var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                                          PrimitiveTypes.UserId[/* fromString */1]("a"),
                                          PrimitiveTypes.UserId[/* fromString */1]("b"),
                                          PrimitiveTypes.UserId[/* fromString */1]("c")
                                        ]);
                                    var arg$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[PrimitiveTypes.UserId[/* fromString */1]("a")]);
                                    return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0]((function (param) {
                                                        return Curry._2(Policy.canBeFulfilled(param), arg, arg$1);
                                                      })(p)));
                                  }));
                    }));
      }));

Jest.describe("AtLeast", (function (param) {
        var p = Policy.atLeast(2);
        Jest.test("fulfilled", (function (param) {
                var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                      PrimitiveTypes.UserId[/* fromString */1]("a"),
                      PrimitiveTypes.UserId[/* fromString */1]("b")
                    ]);
                var arg$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                      PrimitiveTypes.UserId[/* fromString */1]("a"),
                      PrimitiveTypes.UserId[/* fromString */1]("b")
                    ]);
                return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0]((function (param) {
                                    return Curry._2(Policy.fulfilled(param), arg, arg$1);
                                  })(p)));
              }));
        Jest.test("fullfilled with n votes", (function (param) {
                var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                      PrimitiveTypes.UserId[/* fromString */1]("a"),
                      PrimitiveTypes.UserId[/* fromString */1]("b"),
                      PrimitiveTypes.UserId[/* fromString */1]("c")
                    ]);
                var arg$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                      PrimitiveTypes.UserId[/* fromString */1]("a"),
                      PrimitiveTypes.UserId[/* fromString */1]("b")
                    ]);
                return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0]((function (param) {
                                    return Curry._2(Policy.fulfilled(param), arg, arg$1);
                                  })(p)));
              }));
        Jest.test("not fullfilled", (function (param) {
                var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                      PrimitiveTypes.UserId[/* fromString */1]("a"),
                      PrimitiveTypes.UserId[/* fromString */1]("b"),
                      PrimitiveTypes.UserId[/* fromString */1]("c"),
                      PrimitiveTypes.UserId[/* fromString */1]("d")
                    ]);
                var arg$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[PrimitiveTypes.UserId[/* fromString */1]("a")]);
                return Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0]((function (param) {
                                    return Curry._2(Policy.fulfilled(param), arg, arg$1);
                                  })(p)));
              }));
        Jest.test("at least one eligible", (function (param) {
                var arg = PrimitiveTypes.UserId[/* emptySet */9];
                var arg$1 = PrimitiveTypes.UserId[/* emptySet */9];
                return Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0]((function (param) {
                                    return Curry._2(Policy.fulfilled(param), arg, arg$1);
                                  })(p)));
              }));
        return Jest.describe("canBeFullfilled", (function (param) {
                      Jest.test("with all but n - 1 rejections", (function (param) {
                              var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                                    PrimitiveTypes.UserId[/* fromString */1]("a"),
                                    PrimitiveTypes.UserId[/* fromString */1]("b"),
                                    PrimitiveTypes.UserId[/* fromString */1]("c"),
                                    PrimitiveTypes.UserId[/* fromString */1]("d")
                                  ]);
                              var arg$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                                    PrimitiveTypes.UserId[/* fromString */1]("a"),
                                    PrimitiveTypes.UserId[/* fromString */1]("b"),
                                    PrimitiveTypes.UserId[/* fromString */1]("c")
                                  ]);
                              return Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0]((function (param) {
                                                  return Curry._2(Policy.canBeFulfilled(param), arg, arg$1);
                                                })(p)));
                            }));
                      Jest.test("with all n but rejections", (function (param) {
                              var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                                    PrimitiveTypes.UserId[/* fromString */1]("a"),
                                    PrimitiveTypes.UserId[/* fromString */1]("b"),
                                    PrimitiveTypes.UserId[/* fromString */1]("c")
                                  ]);
                              var arg$1 = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[PrimitiveTypes.UserId[/* fromString */1]("a")]);
                              return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0]((function (param) {
                                                  return Curry._2(Policy.canBeFulfilled(param), arg, arg$1);
                                                })(p)));
                            }));
                      return Jest.test("with zero rejections", (function (param) {
                                    var arg = Belt_Set.mergeMany(PrimitiveTypes.UserId[/* emptySet */9], /* array */[
                                          PrimitiveTypes.UserId[/* fromString */1]("a"),
                                          PrimitiveTypes.UserId[/* fromString */1]("b")
                                        ]);
                                    var arg$1 = PrimitiveTypes.UserId[/* emptySet */9];
                                    return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0]((function (param) {
                                                        return Curry._2(Policy.canBeFulfilled(param), arg, arg$1);
                                                      })(p)));
                                  }));
                    }));
      }));

/*  Not a pure module */

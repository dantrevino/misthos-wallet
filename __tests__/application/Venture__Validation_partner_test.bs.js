// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Generators = require("../helpers/Generators.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var PrimitiveTypes = require("../../src/application/PrimitiveTypes.bs.js");
var ValidationHelpers = require("../helpers/ValidationHelpers.bs.js");
var Venture__Validation = require("../../src/application/Venture__Validation.bs.js");

describe("PartnerProposal", (function () {
        describe("when proposing another partner", (function () {
                var match = Generators.twoUserSessions(/* () */0);
                var user2 = match[1];
                var user1 = match[0];
                var log = Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1));
                var func = Generators.Log[/* withPartnerProposed */12];
                return ValidationHelpers.testValidationResult(undefined, ValidationHelpers.constructState(undefined, log), Generators.Log[/* lastItem */4](Curry._1((function (param, param$1, param$2, param$3) {
                                        return Curry._6(func, param, param$1, param$2, param$3, user1, user2);
                                      })(undefined, undefined, undefined, undefined), log)), /* Ok */0);
              }));
        describe("when the prospect is already a partner", (function () {
                var match = Generators.twoUserSessions(/* () */0);
                var user2 = match[1];
                var user1 = match[0];
                var log = Generators.Log[/* withPartner */17](undefined, user2, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1)));
                var func = Generators.Log[/* withPartnerProposed */12];
                return ValidationHelpers.testValidationResult(undefined, ValidationHelpers.constructState(undefined, log), Generators.Log[/* lastItem */4](Curry._1((function (param, param$1, param$2, param$3) {
                                        return Curry._6(func, param, param$1, param$2, param$3, user2, user1);
                                      })(undefined, undefined, undefined, undefined), log)), /* BadData */["Partner already exists"]);
              }));
        describe("when the creator proposes themselves", (function () {
                var user1 = Generators.userSession(PrimitiveTypes.UserId[/* fromString */1]("user1"));
                var log = Generators.Log[/* createVenture */11](user1);
                var func = Generators.Log[/* withPartnerProposed */12];
                return ValidationHelpers.testValidationResult(undefined, ValidationHelpers.constructState(undefined, log), Generators.Log[/* lastItem */4](Curry._1((function (param, param$1, param$2, param$3) {
                                        return Curry._6(func, param, param$1, param$2, param$3, user1, user1);
                                      })(undefined, undefined, undefined, undefined), log)), /* Ok */0);
              }));
        describe("when proposing a partner that was removed", (function () {
                var match = Generators.twoUserSessions(/* () */0);
                var user2 = match[1];
                var user1 = match[0];
                var log = Generators.Log[/* withPartnerRemoved */23](user2, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withPartner */17](undefined, user2, /* :: */[
                          user1,
                          /* [] */0
                        ], Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1))));
                var func = Generators.Log[/* withPartnerProposed */12];
                return ValidationHelpers.testValidationResult(undefined, ValidationHelpers.constructState(undefined, log), Generators.Log[/* lastItem */4](Curry._1((function (param, param$1, param$2, param$3) {
                                        return Curry._6(func, param, param$1, param$2, param$3, user1, user2);
                                      })(undefined, undefined, undefined, undefined), log)), /* Ok */0);
              }));
        describe("when the partner was removed but the proposal doesn't show it", (function () {
                var match = Generators.threeUserSessions(/* () */0);
                var user3 = match[2];
                var user2 = match[1];
                var user1 = match[0];
                var log = Generators.Log[/* withPartnerRemoved */23](user2, /* :: */[
                      user1,
                      /* :: */[
                        user3,
                        /* [] */0
                      ]
                    ], Generators.Log[/* withPartner */17](undefined, user3, /* :: */[
                          user1,
                          /* :: */[
                            user2,
                            /* [] */0
                          ]
                        ], Generators.Log[/* withPartner */17](undefined, user2, /* :: */[
                              user1,
                              /* [] */0
                            ], Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1)))));
                var func = Generators.Log[/* withPartnerProposed */12];
                return ValidationHelpers.testValidationResult(undefined, ValidationHelpers.constructState(undefined, log), Generators.Log[/* lastItem */4](Curry._1((function (param, param$1, param$2) {
                                        return Curry._6(func, param, false, param$1, param$2, user3, user2);
                                      })(undefined, undefined, undefined), log)), /* BadData */["Last removal doesn't match"]);
              }));
        return /* () */0;
      }));

describe("PartnerRemovalProposal", (function () {
        describe("when proposing another partner", (function () {
                var match = Generators.twoUserSessions(/* () */0);
                var user2 = match[1];
                var user1 = match[0];
                var log = Generators.Log[/* withPartner */17](undefined, user2, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1)));
                return ValidationHelpers.testValidationResult(undefined, ValidationHelpers.constructState(undefined, log), Generators.Log[/* lastItem */4](Generators.Log[/* withPartnerRemovalProposed */19](user1, user2, log)), /* Ok */0);
              }));
        describe("validatePartnerRemovalData", (function () {
                describe("when the prospect is not a partner", (function () {
                        var match = Generators.twoUserSessions(/* () */0);
                        var user2 = match[1];
                        var user1 = match[0];
                        var log = Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1));
                        return ValidationHelpers.testDataValidation(Venture__Validation.validatePartnerRemovalData, ValidationHelpers.constructState(undefined, log), /* record */[
                                    /* id */user2[/* userId */0],
                                    /* lastPartnerProcess */PrimitiveTypes.ProcessId[/* make */10](/* () */0)
                                  ], /* BadData */["Partner with Id '" + (PrimitiveTypes.UserId[/* toString */0](user2[/* userId */0]) + "' doesn't exist")]);
                      }));
                describe("when lastPartnerProcess doesn't match", (function () {
                        var match = Generators.twoUserSessions(/* () */0);
                        var user2 = match[1];
                        var user1 = match[0];
                        var log = Generators.Log[/* withPartner */17](undefined, user2, /* :: */[
                              user1,
                              /* [] */0
                            ], Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1)));
                        return ValidationHelpers.testDataValidation(Venture__Validation.validatePartnerRemovalData, ValidationHelpers.constructState(undefined, log), /* record */[
                                    /* id */user2[/* userId */0],
                                    /* lastPartnerProcess */PrimitiveTypes.ProcessId[/* make */10](/* () */0)
                                  ], /* BadData */["lastPartnerProcess doesn't match"]);
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

describe("PartnerPubKeyAdded", (function () {
        describe("when everything is okay", (function () {
                var match = Generators.twoUserSessions(/* () */0);
                var user2 = match[1];
                var user1 = match[0];
                var log = Generators.Log[/* withPartner */17](false, user2, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1)));
                return ValidationHelpers.testValidationResult(Caml_option.some(user2[/* userId */0]), ValidationHelpers.constructState(undefined, log), Generators.Log[/* lastItem */4](Generators.Log[/* withPartnerPubKeyAdded */20](user2)(log)), /* Ok */0);
              }));
        describe("when the partner submits an event", (function () {
                var match = Generators.threeUserSessions(/* () */0);
                var user3 = match[2];
                var user2 = match[1];
                var user1 = match[0];
                var log = Generators.Log[/* withPartnerPubKeyAdded */20](user2)(Generators.Log[/* withPartner */17](false, user2, /* :: */[
                          user1,
                          /* [] */0
                        ], Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1))));
                var func = Generators.Log[/* withPartnerProposed */12];
                return ValidationHelpers.testValidationResult(undefined, ValidationHelpers.constructState(Caml_option.some(user2[/* userId */0]), log), Generators.Log[/* lastItem */4](Curry._1((function (param, param$1, param$2, param$3) {
                                        return Curry._6(func, param, param$1, param$2, param$3, user2, user3);
                                      })(undefined, undefined, undefined, undefined), log)), /* Ok */0);
              }));
        describe("when syncing from another user", (function () {
                var match = Generators.twoUserSessions(/* () */0);
                var user2 = match[1];
                var user1 = match[0];
                var log = Generators.Log[/* withPartner */17](false, user2, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1)));
                return ValidationHelpers.testValidationResult(Caml_option.some(user1[/* userId */0]), ValidationHelpers.constructState(undefined, log), Generators.Log[/* lastItem */4](Generators.Log[/* withPartnerPubKeyAdded */20](user2)(log)), /* InvalidIssuer */2);
              }));
        describe("when the partner hasn't been accepted", (function () {
                var match = Generators.twoUserSessions(/* () */0);
                var user2 = match[1];
                var user1 = match[0];
                var func = Generators.Log[/* withPartnerProposed */12];
                var arg = function (param, param$1, param$2) {
                  return Curry._6(func, false, param, param$1, param$2, user1, user2);
                };
                var log = (function (eta) {
                      return Curry._1(arg(undefined, undefined, undefined), eta);
                    })(Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1)));
                return ValidationHelpers.testValidationResult(Caml_option.some(user2[/* userId */0]), ValidationHelpers.constructState(undefined, log), Generators.Log[/* lastItem */4](Generators.Log[/* withPartnerPubKeyAdded */20](user2)(log)), /* InvalidIssuer */2);
              }));
        describe("when the pub key is already known", (function () {
                var match = Generators.twoUserSessions(/* () */0);
                var user2 = match[1];
                var user1 = match[0];
                var log = Generators.Log[/* withPartner */17](undefined, user2, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1)));
                return ValidationHelpers.testValidationResult(Caml_option.some(user2[/* userId */0]), ValidationHelpers.constructState(undefined, log), Generators.Log[/* lastItem */4](Generators.Log[/* withPartnerPubKeyAdded */20](user2)(log)), /* BadData */["Partner pub key is already known"]);
              }));
        return /* () */0;
      }));

/*  Not a pure module */

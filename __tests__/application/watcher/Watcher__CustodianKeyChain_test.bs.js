// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var $$Event = require("../../../src/application/events/Event.bs.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Generators = require("../../helpers/Generators.bs.js");
var Caml_oo_curry = require("bs-platform/lib/js/caml_oo_curry.js");
var PrimitiveTypes = require("../../../src/application/PrimitiveTypes.bs.js");
var WatcherHelpers = require("../../helpers/WatcherHelpers.bs.js");
var CustodianKeyChain = require("../../../src/application/wallet/CustodianKeyChain.bs.js");
var Watcher__CustodianKeyChain = require("../../../src/application/watcher/Watcher__CustodianKeyChain.bs.js");

function keyChainEq(keyChainA, keyChainB) {
  return Caml_obj.caml_equal(CustodianKeyChain.encode(keyChainA), CustodianKeyChain.encode(keyChainB));
}

Jest.describe("Watcher__CustodianKeyChain", (function (param) {
        Jest.describe("Will create the initial keychain", (function (param) {
                var match = Generators.twoUserSessions(/* () */0);
                var user1 = match[0];
                var log = Generators.Log[/* withCustodian */33](user1, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withAccount */27](user1, Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1))));
                var acceptance = $$Event.getCustodianAcceptedExn(Generators.Log[/* lastEvent */5](log));
                var watcher = Watcher__CustodianKeyChain.make(user1, acceptance, Generators.Log[/* eventLog */6](log));
                return WatcherHelpers.testWatcherHasEventPending("CustodianKeyChainUpdated", watcher, user1[/* issuerKeyPair */2], (function (param) {
                              if (param.tag === 37) {
                                var match = param[0];
                                if (PrimitiveTypes.ProcessId[/* eq */5](match[/* custodianApprovalProcess */0], acceptance[/* processId */0]) && PrimitiveTypes.UserId[/* eq */5](match[/* custodianId */1], user1[/* userId */0])) {
                                  return keyChainEq(Generators.custodianKeyChain(undefined, undefined, Generators.Log[/* ventureId */2](log), 0, user1), match[/* keyChain */2]);
                                } else {
                                  return false;
                                }
                              } else {
                                return false;
                              }
                            }));
              }));
        Jest.describe("Is idle when the keychain has been updated", (function (param) {
                var match = Generators.twoUserSessions(/* () */0);
                var user1 = match[0];
                var log = Generators.Log[/* withCustodian */33](user1, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withAccount */27](user1, Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1))));
                var acceptance = $$Event.getCustodianAcceptedExn(Generators.Log[/* lastEvent */5](log));
                var watcher = Watcher__CustodianKeyChain.make(user1, acceptance, Generators.Log[/* eventLog */6](log));
                var log$1 = Generators.Log[/* withCustodianKeyChain */38](undefined, undefined, undefined, user1, log);
                Caml_oo_curry.js2(710435299, 1, watcher, Generators.Log[/* lastItem */4](log$1));
                return WatcherHelpers.testWatcherHasNoEventPending(watcher);
              }));
        Jest.describe("Will update the keychain when a partner is removed", (function (param) {
                var match = Generators.twoUserSessions(/* () */0);
                var user2 = match[1];
                var user1 = match[0];
                var log = Generators.Log[/* withCustodian */33](user1, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withAccount */27](user1, Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1))));
                var acceptance = $$Event.getCustodianAcceptedExn(Generators.Log[/* lastEvent */5](log));
                var log$1 = Generators.Log[/* withPartnerRemoved */23](user2, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withPartner */17](undefined, user2, /* :: */[
                          user1,
                          /* [] */0
                        ], Generators.Log[/* withCustodianKeyChain */38](undefined, undefined, undefined, user1, log)));
                var watcher = Watcher__CustodianKeyChain.make(user1, acceptance, Generators.Log[/* eventLog */6](log$1));
                return WatcherHelpers.testWatcherHasEventPending("CustodianKeyChainUpdated", watcher, user1[/* issuerKeyPair */2], (function (param) {
                              if (param.tag === 37) {
                                var match = param[0];
                                if (PrimitiveTypes.ProcessId[/* eq */5](match[/* custodianApprovalProcess */0], acceptance[/* processId */0]) && PrimitiveTypes.UserId[/* eq */5](match[/* custodianId */1], user1[/* userId */0])) {
                                  return keyChainEq(Generators.custodianKeyChain(undefined, undefined, Generators.Log[/* ventureId */2](log$1), 1, user1), match[/* keyChain */2]);
                                } else {
                                  return false;
                                }
                              } else {
                                return false;
                              }
                            }));
              }));
        Jest.describe("Is idle when a hardware keychain is detected", (function (param) {
                var match = Generators.twoUserSessions(/* () */0);
                var user2 = match[1];
                var user1 = match[0];
                var log = Generators.Log[/* withCustodian */33](user1, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withAccount */27](user1, Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1))));
                var acceptance = $$Event.getCustodianAcceptedExn(Generators.Log[/* lastEvent */5](log));
                var log$1 = Generators.Log[/* withPartnerRemoved */23](user2, /* :: */[
                      user1,
                      /* [] */0
                    ], Generators.Log[/* withPartner */17](undefined, user2, /* :: */[
                          user1,
                          /* [] */0
                        ], Generators.Log[/* withCustodianKeyChain */38](1, true, undefined, user1, Generators.Log[/* withCustodianKeyChain */38](undefined, undefined, undefined, user1, log))));
                return WatcherHelpers.testWatcherHasNoEventPending(Watcher__CustodianKeyChain.make(user1, acceptance, Generators.Log[/* eventLog */6](log$1)));
              }));
        Jest.describe("Keeps increasing the index accross multiple removals", (function (param) {
                var match = Generators.twoUserSessions(/* () */0);
                var user2 = match[1];
                var user1 = match[0];
                var log = Generators.Log[/* withCustodian */33](user1, /* :: */[
                      user2,
                      /* :: */[
                        user1,
                        /* [] */0
                      ]
                    ], Generators.Log[/* withPartner */17](undefined, user1, /* :: */[
                          user2,
                          /* [] */0
                        ], Generators.Log[/* withPartnerRemoved */23](user1, /* :: */[
                              user2,
                              /* [] */0
                            ], Generators.Log[/* withPartner */17](undefined, user2, /* :: */[
                                  user1,
                                  /* [] */0
                                ], Generators.Log[/* withCustodianKeyChain */38](undefined, undefined, undefined, user1, Generators.Log[/* withCustodian */33](user1, /* :: */[
                                          user1,
                                          /* [] */0
                                        ], Generators.Log[/* withAccount */27](user1, Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1)))))))));
                var acceptance = $$Event.getCustodianAcceptedExn(Generators.Log[/* lastEvent */5](log));
                var watcher = Watcher__CustodianKeyChain.make(user1, acceptance, Generators.Log[/* eventLog */6](log));
                return WatcherHelpers.testWatcherHasEventPending("CustodianKeyChainUpdated", watcher, user1[/* issuerKeyPair */2], (function (param) {
                              if (param.tag === 37) {
                                var match = param[0];
                                if (PrimitiveTypes.ProcessId[/* eq */5](match[/* custodianApprovalProcess */0], acceptance[/* processId */0]) && PrimitiveTypes.UserId[/* eq */5](match[/* custodianId */1], user1[/* userId */0])) {
                                  return keyChainEq(Generators.custodianKeyChain(undefined, undefined, Generators.Log[/* ventureId */2](log), 1, user1), match[/* keyChain */2]);
                                } else {
                                  return false;
                                }
                              } else {
                                return false;
                              }
                            }));
              }));
        return Jest.describe("Completion", (function (param) {
                      Jest.describe("when the custodian is a different user", (function (param) {
                              var match = Generators.twoUserSessions(/* () */0);
                              var user2 = match[1];
                              var user1 = match[0];
                              var log = Generators.Log[/* withCustodian */33](user2, /* :: */[
                                    user1,
                                    /* :: */[
                                      user2,
                                      /* [] */0
                                    ]
                                  ], Generators.Log[/* withPartner */17](undefined, user2, /* :: */[
                                        user1,
                                        /* [] */0
                                      ], Generators.Log[/* withCustodian */33](user1, /* :: */[
                                            user1,
                                            /* [] */0
                                          ], Generators.Log[/* withAccount */27](user1, Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1))))));
                              var acceptance = $$Event.getCustodianAcceptedExn(Generators.Log[/* lastEvent */5](log));
                              var log$1 = Generators.Log[/* withCustodianRemoved */37](user2, /* :: */[
                                    user1,
                                    /* [] */0
                                  ], log);
                              return WatcherHelpers.testWatcherHasCompleted(Watcher__CustodianKeyChain.make(user1, acceptance, Generators.Log[/* eventLog */6](log$1)));
                            }));
                      Jest.describe("when the custodian is removed", (function (param) {
                              var match = Generators.twoUserSessions(/* () */0);
                              var user2 = match[1];
                              var user1 = match[0];
                              var log = Generators.Log[/* withCustodian */33](user2, /* :: */[
                                    user1,
                                    /* :: */[
                                      user2,
                                      /* [] */0
                                    ]
                                  ], Generators.Log[/* withPartner */17](undefined, user2, /* :: */[
                                        user1,
                                        /* [] */0
                                      ], Generators.Log[/* withCustodian */33](user1, /* :: */[
                                            user1,
                                            /* [] */0
                                          ], Generators.Log[/* withAccount */27](user1, Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1))))));
                              var acceptance = $$Event.getCustodianAcceptedExn(Generators.Log[/* lastEvent */5](log));
                              var log$1 = Generators.Log[/* withCustodianRemoved */37](user2, /* :: */[
                                    user1,
                                    /* [] */0
                                  ], log);
                              return WatcherHelpers.testWatcherHasCompleted(Watcher__CustodianKeyChain.make(user2, acceptance, Generators.Log[/* eventLog */6](log$1)));
                            }));
                      Jest.describe("when the partner is removed", (function (param) {
                              var match = Generators.twoUserSessions(/* () */0);
                              var user2 = match[1];
                              var user1 = match[0];
                              var log = Generators.Log[/* withCustodian */33](user2, /* :: */[
                                    user1,
                                    /* :: */[
                                      user2,
                                      /* [] */0
                                    ]
                                  ], Generators.Log[/* withPartner */17](undefined, user2, /* :: */[
                                        user1,
                                        /* [] */0
                                      ], Generators.Log[/* withCustodian */33](user1, /* :: */[
                                            user1,
                                            /* [] */0
                                          ], Generators.Log[/* withAccount */27](user1, Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1))))));
                              var acceptance = $$Event.getCustodianAcceptedExn(Generators.Log[/* lastEvent */5](log));
                              var log$1 = Generators.Log[/* withPartnerRemoved */23](user2, /* :: */[
                                    user1,
                                    /* [] */0
                                  ], log);
                              return WatcherHelpers.testWatcherHasCompleted(Watcher__CustodianKeyChain.make(user2, acceptance, Generators.Log[/* eventLog */6](log$1)));
                            }));
                      return Jest.describe("when the partner has no pubkey", (function (param) {
                                    var match = Generators.twoUserSessions(/* () */0);
                                    var user2 = match[1];
                                    var user1 = match[0];
                                    var log = Generators.Log[/* withCustodian */33](user2, /* :: */[
                                          user1,
                                          /* :: */[
                                            user2,
                                            /* [] */0
                                          ]
                                        ], Generators.Log[/* withPartner */17](false, user2, /* :: */[
                                              user1,
                                              /* [] */0
                                            ], Generators.Log[/* withCustodian */33](user1, /* :: */[
                                                  user1,
                                                  /* [] */0
                                                ], Generators.Log[/* withAccount */27](user1, Generators.Log[/* withFirstPartner */18](user1)(Generators.Log[/* createVenture */11](user1))))));
                                    var acceptance = $$Event.getCustodianAcceptedExn(Generators.Log[/* lastEvent */5](log));
                                    return WatcherHelpers.testWatcherHasNoEventPending(Watcher__CustodianKeyChain.make(user2, acceptance, Generators.Log[/* eventLog */6](log)));
                                  }));
                    }));
      }));

var KeyChain = 0;

var CustodianKeyChain$1 = 0;

exports.KeyChain = KeyChain;
exports.CustodianKeyChain = CustodianKeyChain$1;
exports.keyChainEq = keyChainEq;
/*  Not a pure module */

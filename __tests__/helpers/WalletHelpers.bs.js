// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Address = require("../../src/application/wallet/Address.bs.js");
var Generators = require("./Generators.bs.js");
var WalletTypes = require("../../src/application/wallet/WalletTypes.bs.js");
var PrimitiveTypes = require("../../src/application/PrimitiveTypes.bs.js");
var Venture__Wallet = require("../../src/application/Venture__Wallet.bs.js");
var WalletInfoCollector = require("../../src/application/wallet/WalletInfoCollector.bs.js");

function constructState(log) {
  return Generators.Log[/* reduce */1]((function (s, param) {
                return Venture__Wallet.apply(param[/* event */0], s);
              }), Venture__Wallet.make(/* () */0), log);
}

function testNextIncomeAddress(user, address, wallet) {
  var exposed = Venture__Wallet.exposeNextIncomeAddress(user[/* userId */0], WalletTypes.AccountIndex[/* default */11], wallet);
  var description = "the next address of '" + (PrimitiveTypes.UserId[/* toString */0](user[/* userId */0]) + ("' is '" + (address + "'")));
  Jest.test(description, (function (param) {
          return Jest.Expect[/* toEqual */12](address, Jest.Expect[/* expect */0](exposed[/* address */1][/* displayAddress */5]));
        }));
  return Venture__Wallet.apply(/* IncomeAddressExposed */Block.__(40, [exposed]), wallet);
}

function collectNextTwoAddresses(user, param) {
  var wallet = param[0];
  var exposed1 = Venture__Wallet.exposeNextIncomeAddress(user[/* userId */0], WalletTypes.AccountIndex[/* default */11], wallet);
  var log = Generators.Log[/* appendSystemEvent */8](/* IncomeAddressExposed */Block.__(40, [exposed1]), param[1]);
  var wallet$1 = Venture__Wallet.apply(/* IncomeAddressExposed */Block.__(40, [exposed1]), wallet);
  var exposed2 = Venture__Wallet.exposeNextIncomeAddress(user[/* userId */0], WalletTypes.AccountIndex[/* default */11], wallet$1);
  var log$1 = Generators.Log[/* appendSystemEvent */8](/* IncomeAddressExposed */Block.__(40, [exposed2]), log);
  var wallet$2 = Venture__Wallet.apply(/* IncomeAddressExposed */Block.__(40, [exposed2]), wallet$1);
  return /* tuple */[
          /* tuple */[
            exposed1,
            exposed2
          ],
          /* tuple */[
            wallet$2,
            log$1
          ]
        ];
}

function getExposedAddresses(param) {
  var walletInfoCollector = param[/* walletInfoCollector */3];
  return List.map((function (a) {
                return a[/* displayAddress */5];
              }), List.map((function (coordinates) {
                    return Address.find(coordinates, WalletInfoCollector.accountKeyChains(walletInfoCollector));
                  }), WalletInfoCollector.exposedCoordinates(walletInfoCollector)));
}

var Wallet = 0;

var G = 0;

var L = 0;

var F = 0;

exports.Wallet = Wallet;
exports.G = G;
exports.L = L;
exports.F = F;
exports.constructState = constructState;
exports.testNextIncomeAddress = testNextIncomeAddress;
exports.collectNextTwoAddresses = collectNextTwoAddresses;
exports.getExposedAddresses = getExposedAddresses;
/* Jest Not a pure module */
